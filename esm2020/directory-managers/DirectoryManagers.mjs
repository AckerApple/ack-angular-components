import { stringToXml } from "./stringToXml.function.ts";
export class BaseDmFileReader {
    async readXmlFirstElementContentByTagName(tagName) {
        const elements = await this.readXmlElementsByTagName(tagName);
        return elements.find(tag => tag.textContent)?.textContent;
    }
    async readXmlElementsByTagName(tagName) {
        const xml = await this.readAsXml();
        return new Array(...xml.getElementsByTagName(tagName));
    }
    async readXmlFirstElementByTagName(tagName) {
        const xml = await this.readAsXml();
        const elements = new Array(...xml.getElementsByTagName(tagName));
        return elements.length ? elements[0] : undefined;
    }
    async readAsXml() {
        const string = await this.readAsText();
        return stringToXml(string);
    }
    async readAsJson() {
        return JSON.parse(await this.readAsText());
    }
    readAsText() {
        throw new Error('no override provided for BaseDmFileReader.readAsText');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlyZWN0b3J5TWFuYWdlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0b3J5LW1hbmFnZXJzL0RpcmVjdG9yeU1hbmFnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQXNDdkQsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixLQUFLLENBQUMsbUNBQW1DLENBQUMsT0FBZTtRQUN2RCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM3RCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFFLEVBQUUsV0FBVyxDQUFBO0lBQzVELENBQUM7SUFFRCxLQUFLLENBQUMsd0JBQXdCLENBQUMsT0FBZTtRQUM1QyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNsQyxPQUFPLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBUSxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQUVELEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxPQUFlO1FBQ2hELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBUSxDQUFDLENBQUE7UUFDdkUsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtJQUNsRCxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVM7UUFDYixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUN0QyxPQUFPLFdBQVcsQ0FBRSxNQUFNLENBQUUsQ0FBQTtJQUM5QixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQTtJQUN6RSxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdUb1htbCB9IGZyb20gXCIuL3N0cmluZ1RvWG1sLmZ1bmN0aW9uLnRzXCJcblxuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RvcnlNYW5hZ2VyIHtcbiAgbmFtZTogc3RyaW5nXG4gIHBhdGg6IHN0cmluZ1xuICBnZXREaXJlY3Rvcnk6IChwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBGaWxlU3lzdGVtR2V0RGlyZWN0b3J5T3B0aW9ucykgPT4gUHJvbWlzZTxEaXJlY3RvcnlNYW5hZ2VyPlxuICBcbiAgbGlzdDogKCkgPT4gUHJvbWlzZTxzdHJpbmdbXT5cbiAgbGlzdEZpbGVzOiAoKSA9PiBQcm9taXNlPHN0cmluZ1tdPlxuICBsaXN0Rm9sZGVyczogKCkgPT4gUHJvbWlzZTxzdHJpbmdbXT5cbiAgXG4gIGdldEZvbGRlcnM6ICgpID0+IFByb21pc2U8RGlyZWN0b3J5TWFuYWdlcltdPlxuICBnZXRGaWxlczogKCkgPT4gUHJvbWlzZTxEbUZpbGVSZWFkZXJbXT5cbiAgZmluZEZpbGVCeVBhdGg6IChwYXRoOiBzdHJpbmcpID0+IFByb21pc2U8RG1GaWxlUmVhZGVyIHwgdW5kZWZpbmVkPlxuICBmaWxlOiAoZmlsZU5hbWU6IHN0cmluZywgb3B0aW9ucz86IEZpbGVTeXN0ZW1HZXRGaWxlT3B0aW9ucykgPT4gUHJvbWlzZTxEbUZpbGVSZWFkZXI+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVN0YXRzIHtcbiAgbGFzdE1vZGlmaWVkOiBudW1iZXJcbiAgbGFzdE1vZGlmaWVkRGF0ZT86IERhdGVcbiAgbmFtZTogc3RyaW5nXG4gIHNpemU6IG51bWJlciAvLyA3ODhcbiAgdHlwZTogc3RyaW5nIC8vIFwiYXBwbGljYXRpb24vanNvblwiXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG1GaWxlUmVhZGVyIHtcbiAgZGlyZWN0b3J5OiBEaXJlY3RvcnlNYW5hZ2VyXG4gIG5hbWU6IHN0cmluZ1xuICB3cml0ZTogKGZpbGVTdHJpbmc6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPlxuICByZWFkQXNUZXh0OiAoKSA9PiBQcm9taXNlPHN0cmluZz5cbiAgcmVhZEFzSnNvbjogKCkgPT4gUHJvbWlzZTxPYmplY3Q+XG4gIHJlYWRBc1htbDogKCkgPT4gUHJvbWlzZTxEb2N1bWVudD5cbiAgcmVhZFhtbEZpcnN0RWxlbWVudEJ5VGFnTmFtZTogKHRhZ05hbWU6IHN0cmluZykgPT4gUHJvbWlzZTxFbGVtZW50IHwgdW5kZWZpbmVkPlxuICByZWFkWG1sRWxlbWVudHNCeVRhZ05hbWU6ICh0YWdOYW1lOiBzdHJpbmcpID0+IFByb21pc2U8RWxlbWVudFtdPlxuICByZWFkWG1sRmlyc3RFbGVtZW50Q29udGVudEJ5VGFnTmFtZTogKHRhZ05hbWU6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPlxuICBzdGF0czogKCkgPT4gUHJvbWlzZTxGaWxlU3RhdHM+XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlRG1GaWxlUmVhZGVyIHtcbiAgYXN5bmMgcmVhZFhtbEZpcnN0RWxlbWVudENvbnRlbnRCeVRhZ05hbWUodGFnTmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCB0aGlzLnJlYWRYbWxFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKVxuICAgIHJldHVybiBlbGVtZW50cy5maW5kKHRhZyA9PiB0YWcudGV4dENvbnRlbnQgKT8udGV4dENvbnRlbnRcbiAgfVxuXG4gIGFzeW5jIHJlYWRYbWxFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lOiBzdHJpbmcpOiBQcm9taXNlPEVsZW1lbnRbXT4ge1xuICAgIGNvbnN0IHhtbCA9IGF3YWl0IHRoaXMucmVhZEFzWG1sKClcbiAgICByZXR1cm4gbmV3IEFycmF5KC4uLnhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKSBhcyBhbnkpXG4gIH1cblxuICBhc3luYyByZWFkWG1sRmlyc3RFbGVtZW50QnlUYWdOYW1lKHRhZ05hbWU6IHN0cmluZyk6IFByb21pc2U8RWxlbWVudCB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IHhtbCA9IGF3YWl0IHRoaXMucmVhZEFzWG1sKClcbiAgICBjb25zdCBlbGVtZW50cyA9IG5ldyBBcnJheSguLi54bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSkgYXMgYW55KVxuICAgIHJldHVybiBlbGVtZW50cy5sZW5ndGggPyBlbGVtZW50c1swXSA6IHVuZGVmaW5lZFxuICB9XG5cbiAgYXN5bmMgcmVhZEFzWG1sKCk6IFByb21pc2U8RG9jdW1lbnQ+IHtcbiAgICBjb25zdCBzdHJpbmcgPSBhd2FpdCB0aGlzLnJlYWRBc1RleHQoKVxuICAgIHJldHVybiBzdHJpbmdUb1htbCggc3RyaW5nIClcbiAgfVxuICBcbiAgYXN5bmMgcmVhZEFzSnNvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGF3YWl0IHRoaXMucmVhZEFzVGV4dCgpKVxuICB9XG4gIFxuICByZWFkQXNUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdubyBvdmVycmlkZSBwcm92aWRlZCBmb3IgQmFzZURtRmlsZVJlYWRlci5yZWFkQXNUZXh0JylcbiAgfVxufVxuIl19