export function getNameByPath(path) {
    const half = path.split(/\//).pop();
    return half.split(/\\/).pop();
}
export async function findDirectoryWithin(path, inDir, options) {
    const pathSplit = path.split('/').filter(x => x);
    if (pathSplit.length >= 1) {
        const firstParent = pathSplit.shift(); // remove index 0 of firstParent/firstParent/file.xyz
        try {
            const parent = await inDir.getDirectory(firstParent);
            if (!parent) {
                return; // undefined
            }
            return await findDirectoryWithin(pathSplit.join('/'), parent, options);
        }
        catch (err) {
            const folderList = await inDir.listFolders();
            if (folderList.includes(firstParent)) {
                throw err; // rethrow because its not about a missing folder
            }
            return; // our folderList does not contain what we are looking for
        }
    }
    return inDir; // return last result
}
export async function renameFileInDir(oldFileName, newFileName, dir) {
    const newFile = await copyFileInDir(oldFileName, newFileName, dir);
    await dir.removeEntry(oldFileName);
    return newFile;
}
export async function copyFileInDir(oldFileName, newFileName, dir) {
    const oldFile = await dir.file(oldFileName);
    const data = await oldFile.readAsText();
    const newFile = await dir.file(newFileName, { create: true });
    await newFile.write(data);
    return newFile;
}
export async function getDirForFilePath(path, fromDir, options) {
    const pathSplit = path.split(/\\|\//);
    pathSplit.pop(); // remove the file
    const pathWithoutFile = pathSplit.join('/');
    return await fromDir.getDirectory(pathWithoutFile, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlyZWN0b3J5TWFuYWdlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0b3J5LW1hbmFnZXJzL0RpcmVjdG9yeU1hbmFnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTREQSxNQUFNLFVBQVUsYUFBYSxDQUFDLElBQVk7SUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQVksQ0FBQTtJQUM3QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFZLENBQUE7QUFDekMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsbUJBQW1CLENBQ3ZDLElBQVksRUFDWixLQUF1QixFQUN2QixPQUF1QztJQUV2QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRWhELElBQUssU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUc7UUFDM0IsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBWSxDQUFBLENBQUMscURBQXFEO1FBRXJHLElBQUk7WUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDcEQsSUFBSyxDQUFDLE1BQU0sRUFBRztnQkFDYixPQUFNLENBQUMsWUFBWTthQUNwQjtZQUNELE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtTQUN2RTtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDNUMsSUFBSyxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFHO2dCQUN0QyxNQUFNLEdBQUcsQ0FBQSxDQUFDLGlEQUFpRDthQUM1RDtZQUVELE9BQU0sQ0FBQywwREFBMEQ7U0FDbEU7S0FDRjtJQUVELE9BQU8sS0FBSyxDQUFBLENBQUMscUJBQXFCO0FBQ3BDLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGVBQWUsQ0FDbkMsV0FBbUIsRUFDbkIsV0FBbUIsRUFDbkIsR0FBcUI7SUFFckIsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNsRSxNQUFNLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDbEMsT0FBTyxPQUFPLENBQUE7QUFDaEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUNqQyxXQUFtQixFQUNuQixXQUFtQixFQUNuQixHQUFxQjtJQUVyQixNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDM0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDdkMsTUFBTSxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQzdELE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN6QixPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FDckMsSUFBWSxFQUNaLE9BQXlCLEVBQ3pCLE9BQXVDO0lBRXZDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDckMsU0FBUyxDQUFDLEdBQUcsRUFBWSxDQUFBLENBQUMsa0JBQWtCO0lBQzVDLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFM0MsT0FBTyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQzdELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEbUZpbGVSZWFkZXIgfSBmcm9tIFwiLi9EbUZpbGVSZWFkZXJcIlxuXG5leHBvcnQgaW50ZXJmYWNlIERpcmVjdG9yeU1hbmFnZXIge1xuICBuYW1lOiBzdHJpbmdcbiAgcGF0aDogc3RyaW5nXG5cbiAgY3JlYXRlRGlyZWN0b3J5OiAoXG4gICAgcGF0aDogc3RyaW5nXG4gICkgPT4gUHJvbWlzZTxEaXJlY3RvcnlNYW5hZ2VyPlxuXG4gIC8vIHNob3VsZCB0aHJvdyBlcnJvciBpZiBkaXJlY3RvcnkgZG9lcyBub3QgZXhpc3RcbiAgZ2V0RGlyZWN0b3J5OiAoXG4gICAgcGF0aDogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBGaWxlU3lzdGVtR2V0RGlyZWN0b3J5T3B0aW9uc1xuICApID0+IFByb21pc2U8RGlyZWN0b3J5TWFuYWdlcj5cbiAgXG4gIC8vIHNob3VsZCByZXR1cm4gdW5kZWZpbmVkIGlmIGRpcmVjdG9yeSBkb2VzIG5vdCBleGlzdFxuICBmaW5kRGlyZWN0b3J5OiAoXG4gICAgcGF0aDogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBGaWxlU3lzdGVtR2V0RGlyZWN0b3J5T3B0aW9uc1xuICApID0+IFByb21pc2U8RGlyZWN0b3J5TWFuYWdlciB8IHVuZGVmaW5lZD5cbiAgXG4gIGxpc3Q6ICgpID0+IFByb21pc2U8c3RyaW5nW10+XG4gIGxpc3RGaWxlczogKCkgPT4gUHJvbWlzZTxzdHJpbmdbXT5cbiAgbGlzdEZvbGRlcnM6ICgpID0+IFByb21pc2U8c3RyaW5nW10+XG4gIFxuICBnZXRGb2xkZXJzOiAoKSA9PiBQcm9taXNlPERpcmVjdG9yeU1hbmFnZXJbXT5cbiAgZ2V0RmlsZXM6ICgpID0+IFByb21pc2U8RG1GaWxlUmVhZGVyW10+XG4gIGZpbmRGaWxlQnlQYXRoOiAocGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPERtRmlsZVJlYWRlciB8IHVuZGVmaW5lZD5cbiAgZmlsZTogKFxuICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IEZpbGVTeXN0ZW1HZXRGaWxlT3B0aW9uc1xuICApID0+IFByb21pc2U8RG1GaWxlUmVhZGVyPlxuXG4gIHJlbmFtZUZpbGU6IChcbiAgICBvbGRGaWxlTmFtZTogc3RyaW5nLFxuICAgIG5ld2ZpbGVOYW1lOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IEZpbGVTeXN0ZW1HZXRGaWxlT3B0aW9uc1xuICApID0+IFByb21pc2U8RG1GaWxlUmVhZGVyPlxuXG4gIGNvcHlGaWxlOiAoXG4gICAgb2xkRmlsZU5hbWU6IHN0cmluZyxcbiAgICBuZXdmaWxlTmFtZTogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBGaWxlU3lzdGVtR2V0RmlsZU9wdGlvbnNcbiAgKSA9PiBQcm9taXNlPERtRmlsZVJlYWRlcj5cblxuICByZW1vdmVFbnRyeTogKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBvcHRpb25zPzogeyByZWN1cnNpdmU6IGJvb2xlYW4gfVxuICApID0+IFByb21pc2U8dm9pZD5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlU3RhdHMge1xuICBsYXN0TW9kaWZpZWQ6IG51bWJlclxuICBsYXN0TW9kaWZpZWREYXRlPzogRGF0ZVxuICBuYW1lOiBzdHJpbmdcbiAgc2l6ZTogbnVtYmVyIC8vIDc4OFxuICB0eXBlOiBzdHJpbmcgLy8gXCJhcHBsaWNhdGlvbi9qc29uXCJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVCeVBhdGgocGF0aDogc3RyaW5nKSB7XG4gIGNvbnN0IGhhbGYgPSBwYXRoLnNwbGl0KC9cXC8vKS5wb3AoKSBhcyBzdHJpbmdcbiAgcmV0dXJuIGhhbGYuc3BsaXQoL1xcXFwvKS5wb3AoKSBhcyBzdHJpbmdcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmREaXJlY3RvcnlXaXRoaW4oXG4gIHBhdGg6IHN0cmluZyxcbiAgaW5EaXI6IERpcmVjdG9yeU1hbmFnZXIsXG4gIG9wdGlvbnM/OiBGaWxlU3lzdGVtR2V0RGlyZWN0b3J5T3B0aW9ucyxcbik6IFByb21pc2U8RGlyZWN0b3J5TWFuYWdlciB8IHVuZGVmaW5lZD4ge1xuICBjb25zdCBwYXRoU3BsaXQgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKHggPT4geClcbiAgXG4gIGlmICggcGF0aFNwbGl0Lmxlbmd0aCA+PSAxICkge1xuICAgIGNvbnN0IGZpcnN0UGFyZW50ID0gcGF0aFNwbGl0LnNoaWZ0KCkgYXMgc3RyaW5nIC8vIHJlbW92ZSBpbmRleCAwIG9mIGZpcnN0UGFyZW50L2ZpcnN0UGFyZW50L2ZpbGUueHl6XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IGF3YWl0IGluRGlyLmdldERpcmVjdG9yeShmaXJzdFBhcmVudClcbiAgICAgIGlmICggIXBhcmVudCApIHtcbiAgICAgICAgcmV0dXJuIC8vIHVuZGVmaW5lZFxuICAgICAgfVxuICAgICAgcmV0dXJuIGF3YWl0IGZpbmREaXJlY3RvcnlXaXRoaW4ocGF0aFNwbGl0LmpvaW4oJy8nKSwgcGFyZW50LCBvcHRpb25zKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3QgZm9sZGVyTGlzdCA9IGF3YWl0IGluRGlyLmxpc3RGb2xkZXJzKClcbiAgICAgIGlmICggZm9sZGVyTGlzdC5pbmNsdWRlcyhmaXJzdFBhcmVudCkgKSB7XG4gICAgICAgIHRocm93IGVyciAvLyByZXRocm93IGJlY2F1c2UgaXRzIG5vdCBhYm91dCBhIG1pc3NpbmcgZm9sZGVyXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvLyBvdXIgZm9sZGVyTGlzdCBkb2VzIG5vdCBjb250YWluIHdoYXQgd2UgYXJlIGxvb2tpbmcgZm9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluRGlyIC8vIHJldHVybiBsYXN0IHJlc3VsdFxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVuYW1lRmlsZUluRGlyKFxuICBvbGRGaWxlTmFtZTogc3RyaW5nLFxuICBuZXdGaWxlTmFtZTogc3RyaW5nLFxuICBkaXI6IERpcmVjdG9yeU1hbmFnZXJcbik6IFByb21pc2U8RG1GaWxlUmVhZGVyPiB7XG4gIGNvbnN0IG5ld0ZpbGUgPSBhd2FpdCBjb3B5RmlsZUluRGlyKG9sZEZpbGVOYW1lLCBuZXdGaWxlTmFtZSwgZGlyKVxuICBhd2FpdCBkaXIucmVtb3ZlRW50cnkob2xkRmlsZU5hbWUpXG4gIHJldHVybiBuZXdGaWxlXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb3B5RmlsZUluRGlyKFxuICBvbGRGaWxlTmFtZTogc3RyaW5nLFxuICBuZXdGaWxlTmFtZTogc3RyaW5nLFxuICBkaXI6IERpcmVjdG9yeU1hbmFnZXJcbik6IFByb21pc2U8RG1GaWxlUmVhZGVyPiB7XG4gIGNvbnN0IG9sZEZpbGUgPSBhd2FpdCBkaXIuZmlsZShvbGRGaWxlTmFtZSlcbiAgY29uc3QgZGF0YSA9IGF3YWl0IG9sZEZpbGUucmVhZEFzVGV4dCgpXG4gIGNvbnN0IG5ld0ZpbGUgPSBhd2FpdCBkaXIuZmlsZShuZXdGaWxlTmFtZSwgeyBjcmVhdGU6IHRydWUgfSlcbiAgYXdhaXQgbmV3RmlsZS53cml0ZShkYXRhKVxuICByZXR1cm4gbmV3RmlsZVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RGlyRm9yRmlsZVBhdGgoXG4gIHBhdGg6IHN0cmluZyxcbiAgZnJvbURpcjogRGlyZWN0b3J5TWFuYWdlcixcbiAgb3B0aW9ucz86IEZpbGVTeXN0ZW1HZXREaXJlY3RvcnlPcHRpb25zLFxuKSB7XG4gIGNvbnN0IHBhdGhTcGxpdCA9IHBhdGguc3BsaXQoL1xcXFx8XFwvLylcbiAgcGF0aFNwbGl0LnBvcCgpIGFzIHN0cmluZyAvLyByZW1vdmUgdGhlIGZpbGVcbiAgY29uc3QgcGF0aFdpdGhvdXRGaWxlID0gcGF0aFNwbGl0LmpvaW4oJy8nKVxuXG4gIHJldHVybiBhd2FpdCBmcm9tRGlyLmdldERpcmVjdG9yeShwYXRoV2l0aG91dEZpbGUsIG9wdGlvbnMpXG59XG4iXX0=