import { stringToXml } from "./stringToXml.function.ts";
export class BaseDmFileReader {
    async readXmlFirstElementContentByTagName(tagName) {
        const elements = await this.readXmlElementsByTagName(tagName);
        return elements.find(tag => tag.textContent)?.textContent;
    }
    async readXmlElementsByTagName(tagName) {
        const xml = await this.readAsXml();
        return new Array(...xml.getElementsByTagName(tagName));
    }
    async readXmlFirstElementByTagName(tagName) {
        const xml = await this.readAsXml();
        const elements = new Array(...xml.getElementsByTagName(tagName));
        return elements.length ? elements[0] : undefined;
    }
    async readAsXml() {
        const string = await this.readAsText();
        return stringToXml(string);
    }
    async readAsJson() {
        return JSON.parse(await this.readAsText());
    }
    readAsText() {
        throw new Error('no override provided for BaseDmFileReader.readAsText');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlyZWN0b3J5TWFuYWdlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0b3J5LW1hbmFnZXJzL0RpcmVjdG9yeU1hbmFnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQXdCdkQsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixLQUFLLENBQUMsbUNBQW1DLENBQUMsT0FBZTtRQUN2RCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM3RCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFFLEVBQUUsV0FBVyxDQUFBO0lBQzVELENBQUM7SUFFRCxLQUFLLENBQUMsd0JBQXdCLENBQUMsT0FBZTtRQUM1QyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNsQyxPQUFPLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBUSxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQUVELEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxPQUFlO1FBQ2hELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBUSxDQUFDLENBQUE7UUFDdkUsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtJQUNsRCxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVM7UUFDYixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUN0QyxPQUFPLFdBQVcsQ0FBRSxNQUFNLENBQUUsQ0FBQTtJQUM5QixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQTtJQUN6RSxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdUb1htbCB9IGZyb20gXCIuL3N0cmluZ1RvWG1sLmZ1bmN0aW9uLnRzXCJcblxuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RvcnlNYW5hZ2VyIHtcbiAgcGF0aDogc3RyaW5nXG4gIGdldERpcmVjdG9yeTogKHBhdGg6IHN0cmluZywgb3B0aW9ucz86IEZpbGVTeXN0ZW1HZXREaXJlY3RvcnlPcHRpb25zKSA9PiBQcm9taXNlPERpcmVjdG9yeU1hbmFnZXI+XG4gIGxpc3Q6ICgpID0+IFByb21pc2U8c3RyaW5nW10+XG4gIGxpc3RGaWxlczogKCkgPT4gUHJvbWlzZTxEbUZpbGVSZWFkZXJbXT5cbiAgbGlzdEZvbGRlcnM6ICgpID0+IFByb21pc2U8c3RyaW5nW10+XG4gIGZpbmRGaWxlQnlQYXRoOiAocGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPERtRmlsZVJlYWRlciB8IHVuZGVmaW5lZD5cbiAgZmlsZTogKGZpbGVOYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBGaWxlU3lzdGVtR2V0RmlsZU9wdGlvbnMpID0+IFByb21pc2U8RG1GaWxlUmVhZGVyPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERtRmlsZVJlYWRlciB7XG4gIGRpcmVjdG9yeTogRGlyZWN0b3J5TWFuYWdlclxuICBuYW1lOiBzdHJpbmdcbiAgd3JpdGU6IChmaWxlU3RyaW5nOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD5cbiAgcmVhZEFzVGV4dDogKCkgPT4gUHJvbWlzZTxzdHJpbmc+XG4gIHJlYWRBc0pzb246ICgpID0+IFByb21pc2U8T2JqZWN0PlxuICByZWFkQXNYbWw6ICgpID0+IFByb21pc2U8RG9jdW1lbnQ+XG4gIHJlYWRYbWxGaXJzdEVsZW1lbnRCeVRhZ05hbWU6ICh0YWdOYW1lOiBzdHJpbmcpID0+IFByb21pc2U8RWxlbWVudCB8IHVuZGVmaW5lZD5cbiAgcmVhZFhtbEVsZW1lbnRzQnlUYWdOYW1lOiAodGFnTmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPEVsZW1lbnRbXT5cbiAgcmVhZFhtbEZpcnN0RWxlbWVudENvbnRlbnRCeVRhZ05hbWU6ICh0YWdOYW1lOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZD5cbn1cblxuZXhwb3J0IGNsYXNzIEJhc2VEbUZpbGVSZWFkZXIge1xuICBhc3luYyByZWFkWG1sRmlyc3RFbGVtZW50Q29udGVudEJ5VGFnTmFtZSh0YWdOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMucmVhZFhtbEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpXG4gICAgcmV0dXJuIGVsZW1lbnRzLmZpbmQodGFnID0+IHRhZy50ZXh0Q29udGVudCApPy50ZXh0Q29udGVudFxuICB9XG5cbiAgYXN5bmMgcmVhZFhtbEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWU6IHN0cmluZyk6IFByb21pc2U8RWxlbWVudFtdPiB7XG4gICAgY29uc3QgeG1sID0gYXdhaXQgdGhpcy5yZWFkQXNYbWwoKVxuICAgIHJldHVybiBuZXcgQXJyYXkoLi4ueG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpIGFzIGFueSlcbiAgfVxuXG4gIGFzeW5jIHJlYWRYbWxGaXJzdEVsZW1lbnRCeVRhZ05hbWUodGFnTmFtZTogc3RyaW5nKTogUHJvbWlzZTxFbGVtZW50IHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgeG1sID0gYXdhaXQgdGhpcy5yZWFkQXNYbWwoKVxuICAgIGNvbnN0IGVsZW1lbnRzID0gbmV3IEFycmF5KC4uLnhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKSBhcyBhbnkpXG4gICAgcmV0dXJuIGVsZW1lbnRzLmxlbmd0aCA/IGVsZW1lbnRzWzBdIDogdW5kZWZpbmVkXG4gIH1cblxuICBhc3luYyByZWFkQXNYbWwoKTogUHJvbWlzZTxEb2N1bWVudD4ge1xuICAgIGNvbnN0IHN0cmluZyA9IGF3YWl0IHRoaXMucmVhZEFzVGV4dCgpXG4gICAgcmV0dXJuIHN0cmluZ1RvWG1sKCBzdHJpbmcgKVxuICB9XG4gIFxuICBhc3luYyByZWFkQXNKc29uKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoYXdhaXQgdGhpcy5yZWFkQXNUZXh0KCkpXG4gIH1cbiAgXG4gIHJlYWRBc1RleHQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIG92ZXJyaWRlIHByb3ZpZGVkIGZvciBCYXNlRG1GaWxlUmVhZGVyLnJlYWRBc1RleHQnKVxuICB9XG59XG4iXX0=