export function getNameByPath(path) {
    const half = path.split(/\//).pop();
    return half.split(/\\/).pop();
}
export async function findDirectoryWithin(path, inDir, options) {
    const pathSplit = path.split('/').filter(x => x);
    if (pathSplit.length >= 1) {
        const firstParent = pathSplit.shift(); // remove index 0 of firstParent/firstParent/file.xyz
        try {
            const parent = await inDir.getDirectory(firstParent);
            if (!parent) {
                return; // undefined
            }
            return await findDirectoryWithin(pathSplit.join('/'), parent, options);
        }
        catch (err) {
            const folderList = await inDir.listFolders();
            if (folderList.includes(firstParent)) {
                throw err; // rethrow because its not about a missing folder
            }
            return; // our folderList does not contain what we are looking for
        }
    }
    return inDir; // return last result
}
export async function renameFileInDir(oldFileName, newFileName, dir) {
    const oldFile = await dir.file(oldFileName);
    const data = await oldFile.readAsText();
    const newFile = await dir.file(newFileName, { create: true });
    await newFile.write(data);
    await dir.removeEntry(oldFileName);
    return newFile;
}
export async function getDirForFilePath(path, fromDir, options) {
    const pathSplit = path.split(/\\|\//);
    pathSplit.pop(); // remove the file
    const pathWithoutFile = pathSplit.join('/');
    return await fromDir.getDirectory(pathWithoutFile, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlyZWN0b3J5TWFuYWdlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0b3J5LW1hbmFnZXJzL0RpcmVjdG9yeU1hbmFnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNEQSxNQUFNLFVBQVUsYUFBYSxDQUFDLElBQVk7SUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQVksQ0FBQTtJQUM3QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFZLENBQUE7QUFDekMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsbUJBQW1CLENBQ3ZDLElBQVksRUFDWixLQUF1QixFQUN2QixPQUF1QztJQUV2QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRWhELElBQUssU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUc7UUFDM0IsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBWSxDQUFBLENBQUMscURBQXFEO1FBRXJHLElBQUk7WUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDcEQsSUFBSyxDQUFDLE1BQU0sRUFBRztnQkFDYixPQUFNLENBQUMsWUFBWTthQUNwQjtZQUNELE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtTQUN2RTtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDNUMsSUFBSyxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFHO2dCQUN0QyxNQUFNLEdBQUcsQ0FBQSxDQUFDLGlEQUFpRDthQUM1RDtZQUVELE9BQU0sQ0FBQywwREFBMEQ7U0FDbEU7S0FDRjtJQUVELE9BQU8sS0FBSyxDQUFBLENBQUMscUJBQXFCO0FBQ3BDLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGVBQWUsQ0FDbkMsV0FBbUIsRUFDbkIsV0FBbUIsRUFDbkIsR0FBcUI7SUFFckIsTUFBTSxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzNDLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUM3RCxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDekIsTUFBTSxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ2xDLE9BQU8sT0FBTyxDQUFBO0FBQ2hCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGlCQUFpQixDQUNyQyxJQUFZLEVBQ1osT0FBeUIsRUFDekIsT0FBdUM7SUFFdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNyQyxTQUFTLENBQUMsR0FBRyxFQUFZLENBQUEsQ0FBQyxrQkFBa0I7SUFDNUMsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUUzQyxPQUFPLE1BQU0sT0FBTyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDN0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERtRmlsZVJlYWRlciB9IGZyb20gXCIuL0RtRmlsZVJlYWRlclwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlyZWN0b3J5TWFuYWdlciB7XG4gIG5hbWU6IHN0cmluZ1xuICBwYXRoOiBzdHJpbmdcblxuICBjcmVhdGVEaXJlY3Rvcnk6IChcbiAgICBwYXRoOiBzdHJpbmdcbiAgKSA9PiBQcm9taXNlPERpcmVjdG9yeU1hbmFnZXI+XG5cbiAgLy8gc2hvdWxkIHRocm93IGVycm9yIGlmIGRpcmVjdG9yeSBkb2VzIG5vdCBleGlzdFxuICBnZXREaXJlY3Rvcnk6IChcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IEZpbGVTeXN0ZW1HZXREaXJlY3RvcnlPcHRpb25zXG4gICkgPT4gUHJvbWlzZTxEaXJlY3RvcnlNYW5hZ2VyPlxuICBcbiAgLy8gc2hvdWxkIHJldHVybiB1bmRlZmluZWQgaWYgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0XG4gIGZpbmREaXJlY3Rvcnk6IChcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IEZpbGVTeXN0ZW1HZXREaXJlY3RvcnlPcHRpb25zXG4gICkgPT4gUHJvbWlzZTxEaXJlY3RvcnlNYW5hZ2VyIHwgdW5kZWZpbmVkPlxuICBcbiAgbGlzdDogKCkgPT4gUHJvbWlzZTxzdHJpbmdbXT5cbiAgbGlzdEZpbGVzOiAoKSA9PiBQcm9taXNlPHN0cmluZ1tdPlxuICBsaXN0Rm9sZGVyczogKCkgPT4gUHJvbWlzZTxzdHJpbmdbXT5cbiAgXG4gIGdldEZvbGRlcnM6ICgpID0+IFByb21pc2U8RGlyZWN0b3J5TWFuYWdlcltdPlxuICBnZXRGaWxlczogKCkgPT4gUHJvbWlzZTxEbUZpbGVSZWFkZXJbXT5cbiAgZmluZEZpbGVCeVBhdGg6IChwYXRoOiBzdHJpbmcpID0+IFByb21pc2U8RG1GaWxlUmVhZGVyIHwgdW5kZWZpbmVkPlxuICBmaWxlOiAoXG4gICAgZmlsZU5hbWU6IHN0cmluZyxcbiAgICBvcHRpb25zPzogRmlsZVN5c3RlbUdldEZpbGVPcHRpb25zXG4gICkgPT4gUHJvbWlzZTxEbUZpbGVSZWFkZXI+XG5cbiAgcmVuYW1lRmlsZTogKFxuICAgIG9sZEZpbGVOYW1lOiBzdHJpbmcsXG4gICAgbmV3ZmlsZU5hbWU6IHN0cmluZyxcbiAgICBvcHRpb25zPzogRmlsZVN5c3RlbUdldEZpbGVPcHRpb25zXG4gICkgPT4gUHJvbWlzZTxEbUZpbGVSZWFkZXI+XG5cbiAgcmVtb3ZlRW50cnk6IChcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IHsgcmVjdXJzaXZlOiBib29sZWFuIH1cbiAgKSA9PiBQcm9taXNlPHZvaWQ+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVN0YXRzIHtcbiAgbGFzdE1vZGlmaWVkOiBudW1iZXJcbiAgbGFzdE1vZGlmaWVkRGF0ZT86IERhdGVcbiAgbmFtZTogc3RyaW5nXG4gIHNpemU6IG51bWJlciAvLyA3ODhcbiAgdHlwZTogc3RyaW5nIC8vIFwiYXBwbGljYXRpb24vanNvblwiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lQnlQYXRoKHBhdGg6IHN0cmluZykge1xuICBjb25zdCBoYWxmID0gcGF0aC5zcGxpdCgvXFwvLykucG9wKCkgYXMgc3RyaW5nXG4gIHJldHVybiBoYWxmLnNwbGl0KC9cXFxcLykucG9wKCkgYXMgc3RyaW5nXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kRGlyZWN0b3J5V2l0aGluKFxuICBwYXRoOiBzdHJpbmcsXG4gIGluRGlyOiBEaXJlY3RvcnlNYW5hZ2VyLFxuICBvcHRpb25zPzogRmlsZVN5c3RlbUdldERpcmVjdG9yeU9wdGlvbnMsXG4pOiBQcm9taXNlPERpcmVjdG9yeU1hbmFnZXIgfCB1bmRlZmluZWQ+IHtcbiAgY29uc3QgcGF0aFNwbGl0ID0gcGF0aC5zcGxpdCgnLycpLmZpbHRlcih4ID0+IHgpXG4gIFxuICBpZiAoIHBhdGhTcGxpdC5sZW5ndGggPj0gMSApIHtcbiAgICBjb25zdCBmaXJzdFBhcmVudCA9IHBhdGhTcGxpdC5zaGlmdCgpIGFzIHN0cmluZyAvLyByZW1vdmUgaW5kZXggMCBvZiBmaXJzdFBhcmVudC9maXJzdFBhcmVudC9maWxlLnh5elxuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBhd2FpdCBpbkRpci5nZXREaXJlY3RvcnkoZmlyc3RQYXJlbnQpXG4gICAgICBpZiAoICFwYXJlbnQgKSB7XG4gICAgICAgIHJldHVybiAvLyB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCBmaW5kRGlyZWN0b3J5V2l0aGluKHBhdGhTcGxpdC5qb2luKCcvJyksIHBhcmVudCwgb3B0aW9ucylcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IGZvbGRlckxpc3QgPSBhd2FpdCBpbkRpci5saXN0Rm9sZGVycygpXG4gICAgICBpZiAoIGZvbGRlckxpc3QuaW5jbHVkZXMoZmlyc3RQYXJlbnQpICkge1xuICAgICAgICB0aHJvdyBlcnIgLy8gcmV0aHJvdyBiZWNhdXNlIGl0cyBub3QgYWJvdXQgYSBtaXNzaW5nIGZvbGRlclxuICAgICAgfVxuXG4gICAgICByZXR1cm4gLy8gb3VyIGZvbGRlckxpc3QgZG9lcyBub3QgY29udGFpbiB3aGF0IHdlIGFyZSBsb29raW5nIGZvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbkRpciAvLyByZXR1cm4gbGFzdCByZXN1bHRcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmFtZUZpbGVJbkRpcihcbiAgb2xkRmlsZU5hbWU6IHN0cmluZyxcbiAgbmV3RmlsZU5hbWU6IHN0cmluZyxcbiAgZGlyOiBEaXJlY3RvcnlNYW5hZ2VyXG4pOiBQcm9taXNlPERtRmlsZVJlYWRlcj4ge1xuICBjb25zdCBvbGRGaWxlID0gYXdhaXQgZGlyLmZpbGUob2xkRmlsZU5hbWUpXG4gIGNvbnN0IGRhdGEgPSBhd2FpdCBvbGRGaWxlLnJlYWRBc1RleHQoKVxuICBjb25zdCBuZXdGaWxlID0gYXdhaXQgZGlyLmZpbGUobmV3RmlsZU5hbWUsIHsgY3JlYXRlOiB0cnVlIH0pXG4gIGF3YWl0IG5ld0ZpbGUud3JpdGUoZGF0YSlcbiAgYXdhaXQgZGlyLnJlbW92ZUVudHJ5KG9sZEZpbGVOYW1lKVxuICByZXR1cm4gbmV3RmlsZVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RGlyRm9yRmlsZVBhdGgoXG4gIHBhdGg6IHN0cmluZyxcbiAgZnJvbURpcjogRGlyZWN0b3J5TWFuYWdlcixcbiAgb3B0aW9ucz86IEZpbGVTeXN0ZW1HZXREaXJlY3RvcnlPcHRpb25zLFxuKSB7XG4gIGNvbnN0IHBhdGhTcGxpdCA9IHBhdGguc3BsaXQoL1xcXFx8XFwvLylcbiAgcGF0aFNwbGl0LnBvcCgpIGFzIHN0cmluZyAvLyByZW1vdmUgdGhlIGZpbGVcbiAgY29uc3QgcGF0aFdpdGhvdXRGaWxlID0gcGF0aFNwbGl0LmpvaW4oJy8nKVxuXG4gIHJldHVybiBhd2FpdCBmcm9tRGlyLmdldERpcmVjdG9yeShwYXRoV2l0aG91dEZpbGUsIG9wdGlvbnMpXG59XG4iXX0=