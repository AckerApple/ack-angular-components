import { convertSlashes } from "./convertSlashes";
import { BaseDmFileReader, findDirectoryWithin, getNameByPath } from "./DirectoryManagers";
import { path } from "./path";
const fs = typeof Neutralino === 'object' ? Neutralino.filesystem : {};
export class NeutralinoDmFileReader extends BaseDmFileReader {
    constructor(filePath, directory) {
        super();
        this.filePath = filePath;
        this.directory = directory;
        this.name = filePath.split('/').pop();
    }
    async stats() {
        const stats = await fs.getStats(this.filePath);
        stats.name = stats.name || this.name;
        return stats;
    }
    readAsText() {
        return fs.readFile(this.filePath); // .toString()
    }
    async readAsDataURL() {
        let data = await fs.readBinaryFile(this.filePath);
        const view = new Uint8Array(data);
        var decoder = new TextDecoder('utf8');
        var b64encoded = btoa(decoder.decode(view));
        return b64encoded;
    }
    async write(fileString) {
        return fs.writeFile(this.filePath, fileString);
    }
}
export class NeutralinoDirectoryManager {
    constructor(path) {
        this.path = path;
        this.name = getNameByPath(path);
    }
    findDirectory(path, options) {
        return findDirectoryWithin(path, this, options);
    }
    async list() {
        const reads = await Neutralino.filesystem.readDirectory(this.path);
        return reads.filter(read => !['.', '..'].includes(read.entry)).map(read => read.entry);
    }
    async listFolders() {
        const reads = await Neutralino.filesystem.readDirectory(this.path);
        return reads.filter(read => !['.', '..'].includes(read.entry) && read.type === 'DIRECTORY')
            .map(read => read.entry);
    }
    async listFiles() {
        const reads = await Neutralino.filesystem.readDirectory(this.path);
        return reads.filter(read => !['.', '..'].includes(read.entry) && read.type !== 'DIRECTORY')
            .map(read => read.entry);
    }
    async getFolders() {
        return Promise.all((await this.listFolders()).map(async (name) => await this.getDirectory(name)));
    }
    async getFiles() {
        const reads = await Neutralino.filesystem.readDirectory(this.path);
        return reads.filter(read => !['.', '..'].includes(read.entry) && read.type !== 'DIRECTORY')
            .map(read => new NeutralinoDmFileReader(this.getFullPath(read.entry), this));
    }
    async getDirectory(newPath) {
        const pathTo = path.join(this.path, newPath);
        // ensure path exists
        await Neutralino.filesystem.readDirectory(pathTo);
        return new NeutralinoDirectoryManager(pathTo);
    }
    async findFileByPath(filePath) {
        const fullFilePath = this.getFullPath(filePath);
        return new NeutralinoDmFileReader(fullFilePath, this);
    }
    file(fileName, _options) {
        return this.findFileByPath(fileName);
    }
    getFullPath(itemPath) {
        let fullFilePath = path.join(this.path, itemPath);
        return convertSlashes(fullFilePath);
    }
}
//# sourceMappingURL=data:application/json;base64,