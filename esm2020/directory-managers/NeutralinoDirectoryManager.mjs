import { convertSlashes } from "./convertSlashes";
import { BaseDmFileReader, findDirectoryWithin, getDirForFilePath, getNameByPath, renameFileInDir } from "./DirectoryManagers";
import { path } from "./path";
const fs = typeof Neutralino === 'object' ? Neutralino.filesystem : {};
export class NeutralinoDmFileReader extends BaseDmFileReader {
    constructor(filePath, directory) {
        super();
        this.filePath = filePath;
        this.directory = directory;
        this.name = filePath.split(/\\|\//).pop();
    }
    async stats() {
        const stats = await fs.getStats(this.filePath);
        stats.name = stats.name || this.name;
        return stats;
    }
    readAsText() {
        return fs.readFile(this.filePath); // .toString()
    }
    async readAsDataURL() {
        let data = await fs.readBinaryFile(this.filePath);
        const view = new Uint8Array(data);
        var decoder = new TextDecoder('utf8');
        var b64encoded = btoa(decoder.decode(view));
        return b64encoded;
    }
    async write(fileString) {
        return fs.writeFile(this.filePath, fileString);
    }
}
export class NeutralinoDirectoryManager {
    constructor(path) {
        this.path = path;
        this.name = getNameByPath(path);
    }
    findDirectory(path, options) {
        return findDirectoryWithin(path, this, options);
    }
    async list() {
        const reads = await Neutralino.filesystem.readDirectory(this.path);
        return reads.filter(read => !['.', '..'].includes(read.entry)).map(read => read.entry);
    }
    async listFolders() {
        const reads = await Neutralino.filesystem.readDirectory(this.path);
        return reads.filter(read => !['.', '..'].includes(read.entry) && read.type === 'DIRECTORY')
            .map(read => read.entry);
    }
    async listFiles() {
        const reads = await Neutralino.filesystem.readDirectory(this.path);
        return reads.filter(read => !['.', '..'].includes(read.entry) && read.type !== 'DIRECTORY')
            .map(read => read.entry);
    }
    async getFolders() {
        return Promise.all((await this.listFolders()).map(async (name) => await this.getDirectory(name)));
    }
    async getFiles() {
        const reads = await Neutralino.filesystem.readDirectory(this.path);
        return reads.filter(read => !['.', '..'].includes(read.entry) && read.type !== 'DIRECTORY')
            .map(read => new NeutralinoDmFileReader(this.getFullPath(read.entry), this));
    }
    async createDirectory(newPath) {
        try {
            const fullPath = path.join(this.path, convertSlashes(newPath));
            await Neutralino.filesystem.readDirectory(fullPath);
            // it exists, just read it
            return this.getDirectory(newPath);
        }
        catch (err) {
            if (err.code === 'NE_FS_NOPATHE') {
                const splitPath = convertSlashes(newPath).split('/');
                let pathTo = this.path;
                while (splitPath.length) {
                    const nowName = splitPath.shift();
                    pathTo = path.join(pathTo, nowName);
                    await Neutralino.filesystem.createDirectory(pathTo);
                }
                const fullPath = pathTo; // path.join(this.path, newPath)
                return new NeutralinoDirectoryManager(fullPath);
            }
            throw err;
        }
    }
    async getDirectory(newPath, options) {
        if (!newPath) {
            return this;
        }
        const pathTo = path.join(this.path, newPath);
        try {
            // ensure path exists
            await Neutralino.filesystem.readDirectory(pathTo);
            return new NeutralinoDirectoryManager(pathTo);
        }
        catch (err) {
            if (err.code === 'NE_FS_NOPATHE' && options?.create) {
                return this.createDirectory(newPath);
            }
            throw err; // rethrow
        }
    }
    async findFileByPath(path) {
        const pathSplit = path.split(/\\|\//);
        const fileName = pathSplit.pop().toLowerCase(); // pathSplit[ pathSplit.length-1 ]
        let dir = this;
        // chrome we dig through the first selected directory and search the subs
        if (pathSplit.length) {
            const findDir = await this.findDirectory(pathSplit.join('/'));
            if (!findDir) {
                return;
            }
            dir = findDir;
        }
        const files = await dir.listFiles();
        const matchName = files.find(listName => listName.toLowerCase() === fileName);
        if (!matchName) {
            return;
        }
        const fullPath = dir.getFullPath(matchName);
        return new NeutralinoDmFileReader(fullPath, dir);
    }
    async file(pathTo, options) {
        const existingFile = await this.findFileByPath(pathTo);
        if (existingFile) {
            return existingFile;
        }
        const dirOptions = { create: options?.create };
        const dir = await getDirForFilePath(pathTo, this, dirOptions);
        const fileName = pathTo.split(/\\|\//).pop();
        const fullPath = path.join(dir.path, fileName);
        return new NeutralinoDmFileReader(fullPath, dir);
    }
    getFullPath(itemPath) {
        let fullFilePath = path.join(this.path, itemPath);
        return convertSlashes(fullFilePath);
    }
    async renameFile(oldFileName, newFileName) {
        return renameFileInDir(oldFileName, newFileName, this);
    }
    async removeEntry(name, options) {
        const split = name.split(/\\|\//);
        const lastName = split.pop(); // remove last item
        const dir = split.length >= 1 ? await this.getDirectory(split.join('/')) : this;
        const pathTo = path.join(dir.path, lastName);
        const fileNames = await dir.listFiles();
        if (fileNames.includes(lastName)) {
            return Neutralino.filesystem.removeFile(pathTo);
        }
        try {
            await Neutralino.filesystem.removeDirectory(pathTo);
        }
        catch (err) {
            // if folder delete failed, it may have items within Neutralino does not have recursive delete
            if (err.code === 'NE_FS_RMDIRER' && options?.recursive) {
                return recurseRemoveDir(await dir.getDirectory(lastName));
            }
            throw err;
        }
        return;
    }
}
async function recurseRemoveDir(dir) {
    // remove all folders within
    const folders = await dir.getFolders();
    for (const subdir of folders) {
        await recurseRemoveDir(subdir);
    }
    // remove all files within
    const list = await dir.listFiles();
    for (const fileName of list) {
        await dir.removeEntry(fileName);
    }
    // try now to delete again
    return Neutralino.filesystem.removeDirectory(dir.path);
}
//# sourceMappingURL=data:application/json;base64,