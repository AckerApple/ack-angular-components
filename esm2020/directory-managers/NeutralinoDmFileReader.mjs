import { BaseDmFileReader } from "./DmFileReader";
import { fs, readTextStream, readWriteFile } from "./Neutralino.streams";
export class NeutralinoDmFileReader extends BaseDmFileReader {
    constructor(filePath, directory) {
        super();
        this.filePath = filePath;
        this.directory = directory;
        this.name = filePath.split(/\\|\//).pop();
    }
    async readTextStream(callback, chunkSize = 82944 // 1024 * 18 because low numbers cause issues
    ) {
        return readTextStream(this.filePath, callback, chunkSize);
    }
    async stats() {
        const stats = await fs.getStats(this.filePath);
        const castedStats = { ...stats };
        castedStats.name = castedStats.name || this.name;
        castedStats.lastModified = stats.modifiedAt;
        castedStats.type = stats.isFile ? 'file' : 'directory';
        return castedStats;
    }
    readAsText() {
        return fs.readFile(this.filePath); // .toString()
    }
    async readAsDataURL() {
        const data = await fs.readBinaryFile(this.filePath);
        const view = new Uint8Array(data);
        const decoded = String.fromCharCode(...view);
        //const decoder = new TextDecoder('utf8')
        //const decoded = decoder.decode(view)
        const b64encoded = btoa(decoded);
        const ext = this.filePath.split('.').pop();
        const dataType = getMimeType(ext);
        const url = `data:${dataType};base64,` + b64encoded; // remove `application/json;base64,`
        return url;
    }
    /**
     * 1. Creates a file of a similar name and reads from source file
     * 2. Writes to created via append commands
     * 3. The original file is renamed on stream end
     * 4. The new file is named to the original and then original file is then deleted */
    async readWriteTextStream(callback, chunkSize = 1024 * 1024) {
        const pathTo = this.directory.path;
        const fullPath = pathTo + '/' + this.name;
        return readWriteFile(fullPath, callback, chunkSize);
    }
    async write(fileString) {
        return fs.writeFile(this.filePath, fileString);
    }
}
function getMimeType(ext) {
    switch (ext) {
        case 'png':
            return 'image/png';
        case 'jpeg':
        case 'jpg':
            return 'image/png';
    }
    return 'application/json';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV1dHJhbGlub0RtRmlsZVJlYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaXJlY3RvcnktbWFuYWdlcnMvTmV1dHJhbGlub0RtRmlsZVJlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQWdDLE1BQU0sZ0JBQWdCLENBQUE7QUFDL0UsT0FBTyxFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFHeEUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGdCQUFnQjtJQUcxRCxZQUNTLFFBQWdCLEVBQ2hCLFNBQXFDO1FBRTVDLEtBQUssRUFBRSxDQUFBO1FBSEEsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixjQUFTLEdBQVQsU0FBUyxDQUE0QjtRQUc1QyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFZLENBQUE7SUFDckQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQ2xCLFFBQXdCLEVBQ3hCLFlBQW9CLEtBQUssQ0FBQyw2Q0FBNkM7O1FBRXZFLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQzNELENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFOUMsTUFBTSxXQUFXLEdBQUcsRUFBQyxHQUFHLEtBQUssRUFBcUIsQ0FBQTtRQUNsRCxXQUFXLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQTtRQUNoRCxXQUFXLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUE7UUFDM0MsV0FBVyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQTtRQUV0RCxPQUFPLFdBQVcsQ0FBQTtJQUNwQixDQUFDO0lBRVEsVUFBVTtRQUNqQixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUMsY0FBYztJQUNsRCxDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWE7UUFDakIsTUFBTSxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNuRCxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVqQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDNUMseUNBQXlDO1FBQ3pDLHNDQUFzQztRQUV0QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFaEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFZLENBQUE7UUFDcEQsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRWpDLE1BQU0sR0FBRyxHQUFHLFFBQVEsUUFBUSxVQUFVLEdBQUcsVUFBVSxDQUFBLENBQUMsb0NBQW9DO1FBQ3hGLE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQztJQUVEOzs7O3lGQUlxRjtJQUNyRixLQUFLLENBQUMsbUJBQW1CLENBQ3ZCLFFBQXdCLEVBQ3hCLFlBQW9CLElBQUksR0FBRyxJQUFJO1FBRS9CLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFBO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQTtRQUN6QyxPQUFPLGFBQWEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3JELENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQWdDO1FBQzFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQ2hELENBQUM7Q0FDRjtBQUVELFNBQVMsV0FBVyxDQUFDLEdBQVc7SUFDOUIsUUFBUSxHQUFHLEVBQUU7UUFDWCxLQUFLLEtBQUs7WUFDUixPQUFPLFdBQVcsQ0FBQTtRQUNwQixLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssS0FBSztZQUNSLE9BQU8sV0FBVyxDQUFBO0tBQ3JCO0lBRUQsT0FBTyxrQkFBa0IsQ0FBQTtBQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZVN0YXRzIH0gZnJvbSBcIi4vRGlyZWN0b3J5TWFuYWdlcnNcIlxuaW1wb3J0IHsgQmFzZURtRmlsZVJlYWRlciwgRG1GaWxlUmVhZGVyLCBzdHJlYW1DYWxsYmFjayB9IGZyb20gXCIuL0RtRmlsZVJlYWRlclwiXG5pbXBvcnQgeyBmcywgcmVhZFRleHRTdHJlYW0sIHJlYWRXcml0ZUZpbGUgfSBmcm9tIFwiLi9OZXV0cmFsaW5vLnN0cmVhbXNcIlxuaW1wb3J0IHsgTmV1dHJhbGlub0RpcmVjdG9yeU1hbmFnZXIgfSBmcm9tIFwiLi9OZXV0cmFsaW5vRGlyZWN0b3J5TWFuYWdlclwiXG5cbmV4cG9ydCBjbGFzcyBOZXV0cmFsaW5vRG1GaWxlUmVhZGVyIGV4dGVuZHMgQmFzZURtRmlsZVJlYWRlciBpbXBsZW1lbnRzIERtRmlsZVJlYWRlciB7XG4gIG5hbWU6IHN0cmluZ1xuICBcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgcHVibGljIGRpcmVjdG9yeTogTmV1dHJhbGlub0RpcmVjdG9yeU1hbmFnZXIsXG4gICkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLm5hbWUgPSBmaWxlUGF0aC5zcGxpdCgvXFxcXHxcXC8vKS5wb3AoKSBhcyBzdHJpbmdcbiAgfVxuXG4gIGFzeW5jIHJlYWRUZXh0U3RyZWFtKFxuICAgIGNhbGxiYWNrOiBzdHJlYW1DYWxsYmFjayxcbiAgICBjaHVua1NpemU6IG51bWJlciA9IDgyOTQ0IC8vIDEwMjQgKiAxOCBiZWNhdXNlIGxvdyBudW1iZXJzIGNhdXNlIGlzc3Vlc1xuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcmVhZFRleHRTdHJlYW0odGhpcy5maWxlUGF0aCwgY2FsbGJhY2ssIGNodW5rU2l6ZSlcbiAgfVxuXG4gIGFzeW5jIHN0YXRzKCk6IFByb21pc2U8RmlsZVN0YXRzPiB7XG4gICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBmcy5nZXRTdGF0cyh0aGlzLmZpbGVQYXRoKVxuICAgIFxuICAgIGNvbnN0IGNhc3RlZFN0YXRzID0gey4uLnN0YXRzfSBhcyBhbnkgYXMgRmlsZVN0YXRzXG4gICAgY2FzdGVkU3RhdHMubmFtZSA9IGNhc3RlZFN0YXRzLm5hbWUgfHwgdGhpcy5uYW1lXG4gICAgY2FzdGVkU3RhdHMubGFzdE1vZGlmaWVkID0gc3RhdHMubW9kaWZpZWRBdFxuICAgIGNhc3RlZFN0YXRzLnR5cGUgPSBzdGF0cy5pc0ZpbGUgPyAnZmlsZScgOiAnZGlyZWN0b3J5J1xuICAgIFxuICAgIHJldHVybiBjYXN0ZWRTdGF0c1xuICB9XG5cbiAgb3ZlcnJpZGUgcmVhZEFzVGV4dCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBmcy5yZWFkRmlsZSh0aGlzLmZpbGVQYXRoKSAvLyAudG9TdHJpbmcoKVxuICB9XG4gIFxuICBhc3luYyByZWFkQXNEYXRhVVJMKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGZzLnJlYWRCaW5hcnlGaWxlKHRoaXMuZmlsZVBhdGgpXG4gICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpXG4gICAgXG4gICAgY29uc3QgZGVjb2RlZCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoLi4udmlldylcbiAgICAvL2NvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0ZjgnKVxuICAgIC8vY29uc3QgZGVjb2RlZCA9IGRlY29kZXIuZGVjb2RlKHZpZXcpXG4gICAgXG4gICAgY29uc3QgYjY0ZW5jb2RlZCA9IGJ0b2EoZGVjb2RlZClcblxuICAgIGNvbnN0IGV4dCA9IHRoaXMuZmlsZVBhdGguc3BsaXQoJy4nKS5wb3AoKSBhcyBzdHJpbmdcbiAgICBjb25zdCBkYXRhVHlwZSA9IGdldE1pbWVUeXBlKGV4dClcblxuICAgIGNvbnN0IHVybCA9IGBkYXRhOiR7ZGF0YVR5cGV9O2Jhc2U2NCxgICsgYjY0ZW5jb2RlZCAvLyByZW1vdmUgYGFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGBcbiAgICByZXR1cm4gdXJsXG4gIH1cblxuICAvKipcbiAgICogMS4gQ3JlYXRlcyBhIGZpbGUgb2YgYSBzaW1pbGFyIG5hbWUgYW5kIHJlYWRzIGZyb20gc291cmNlIGZpbGVcbiAgICogMi4gV3JpdGVzIHRvIGNyZWF0ZWQgdmlhIGFwcGVuZCBjb21tYW5kc1xuICAgKiAzLiBUaGUgb3JpZ2luYWwgZmlsZSBpcyByZW5hbWVkIG9uIHN0cmVhbSBlbmRcbiAgICogNC4gVGhlIG5ldyBmaWxlIGlzIG5hbWVkIHRvIHRoZSBvcmlnaW5hbCBhbmQgdGhlbiBvcmlnaW5hbCBmaWxlIGlzIHRoZW4gZGVsZXRlZCAqL1xuICBhc3luYyByZWFkV3JpdGVUZXh0U3RyZWFtKFxuICAgIGNhbGxiYWNrOiBzdHJlYW1DYWxsYmFjayxcbiAgICBjaHVua1NpemU6IG51bWJlciA9IDEwMjQgKiAxMDI0LCAvLyAxIE1CXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHBhdGhUbyA9IHRoaXMuZGlyZWN0b3J5LnBhdGhcbiAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGhUbyArICcvJyArIHRoaXMubmFtZVxuICAgIHJldHVybiByZWFkV3JpdGVGaWxlKGZ1bGxQYXRoLCBjYWxsYmFjaywgY2h1bmtTaXplKVxuICB9XG5cbiAgYXN5bmMgd3JpdGUoZmlsZVN0cmluZzogc3RyaW5nIHwgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnMud3JpdGVGaWxlKHRoaXMuZmlsZVBhdGgsIGZpbGVTdHJpbmcpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TWltZVR5cGUoZXh0OiBzdHJpbmcpIHtcbiAgc3dpdGNoIChleHQpIHtcbiAgICBjYXNlICdwbmcnOlxuICAgICAgcmV0dXJuICdpbWFnZS9wbmcnXG4gICAgY2FzZSAnanBlZyc6XG4gICAgY2FzZSAnanBnJzpcbiAgICAgIHJldHVybiAnaW1hZ2UvcG5nJ1xuICB9XG5cbiAgcmV0dXJuICdhcHBsaWNhdGlvbi9qc29uJ1xufSJdfQ==