import { BaseDmFileReader } from "./DmFileReader";
import { fs, readTextStream, readWriteFile } from "./Neutralino.streams";
export class NeutralinoDmFileReader extends BaseDmFileReader {
    constructor(filePath, directory) {
        super();
        this.filePath = filePath;
        this.directory = directory;
        this.name = filePath.split(/\\|\//).pop();
    }
    async readTextStream(callback, chunkSize = 82944 // 1024 * 18 because low numbers cause issues
    ) {
        return readTextStream(this.filePath, callback, chunkSize);
    }
    async stats() {
        const stats = await fs.getStats(this.filePath);
        const castedStats = { ...stats };
        castedStats.name = castedStats.name || this.name;
        castedStats.lastModified = stats.modifiedAt;
        castedStats.type = stats.isFile ? 'file' : 'directory';
        return castedStats;
    }
    readAsText() {
        return fs.readFile(this.filePath); // .toString()
    }
    async readAsDataURL() {
        let data = await fs.readBinaryFile(this.filePath);
        const view = new Uint8Array(data);
        var decoder = new TextDecoder('utf8');
        var b64encoded = btoa(decoder.decode(view));
        return b64encoded;
    }
    /**
     * 1. Creates a file of a similar name and reads from source file
     * 2. Writes to created via append commands
     * 3. The original file is renamed on stream end
     * 4. The new file is named to the original and then original file is then deleted */
    async readWriteTextStream(callback, chunkSize = 1024 * 1024) {
        const pathTo = this.directory.path;
        const fullPath = pathTo + '/' + this.name;
        return readWriteFile(fullPath, callback, chunkSize);
    }
    async write(fileString) {
        return fs.writeFile(this.filePath, fileString);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV1dHJhbGlub0RtRmlsZVJlYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaXJlY3RvcnktbWFuYWdlcnMvTmV1dHJhbGlub0RtRmlsZVJlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQWdDLE1BQU0sZ0JBQWdCLENBQUE7QUFDL0UsT0FBTyxFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFHeEUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGdCQUFnQjtJQUcxRCxZQUNTLFFBQWdCLEVBQ2hCLFNBQXFDO1FBRTVDLEtBQUssRUFBRSxDQUFBO1FBSEEsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixjQUFTLEdBQVQsU0FBUyxDQUE0QjtRQUc1QyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFZLENBQUE7SUFDckQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQ2xCLFFBQXdCLEVBQ3hCLFlBQW9CLEtBQUssQ0FBQyw2Q0FBNkM7O1FBRXZFLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQzNELENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFOUMsTUFBTSxXQUFXLEdBQUcsRUFBQyxHQUFHLEtBQUssRUFBcUIsQ0FBQTtRQUNsRCxXQUFXLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQTtRQUNoRCxXQUFXLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUE7UUFDM0MsV0FBVyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQTtRQUV0RCxPQUFPLFdBQVcsQ0FBQTtJQUNwQixDQUFDO0lBRVEsVUFBVTtRQUNqQixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUMsY0FBYztJQUNsRCxDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWE7UUFDakIsSUFBSSxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNqRCxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQzNDLE9BQU8sVUFBVSxDQUFBO0lBQ25CLENBQUM7SUFFRDs7Ozt5RkFJcUY7SUFDckYsS0FBSyxDQUFDLG1CQUFtQixDQUN2QixRQUF3QixFQUN4QixZQUFvQixJQUFJLEdBQUcsSUFBSTtRQUUvQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQTtRQUNsQyxNQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7UUFDekMsT0FBTyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUNyRCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFnQztRQUMxQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWxlU3RhdHMgfSBmcm9tIFwiLi9EaXJlY3RvcnlNYW5hZ2Vyc1wiXG5pbXBvcnQgeyBCYXNlRG1GaWxlUmVhZGVyLCBEbUZpbGVSZWFkZXIsIHN0cmVhbUNhbGxiYWNrIH0gZnJvbSBcIi4vRG1GaWxlUmVhZGVyXCJcbmltcG9ydCB7IGZzLCByZWFkVGV4dFN0cmVhbSwgcmVhZFdyaXRlRmlsZSB9IGZyb20gXCIuL05ldXRyYWxpbm8uc3RyZWFtc1wiXG5pbXBvcnQgeyBOZXV0cmFsaW5vRGlyZWN0b3J5TWFuYWdlciB9IGZyb20gXCIuL05ldXRyYWxpbm9EaXJlY3RvcnlNYW5hZ2VyXCJcblxuZXhwb3J0IGNsYXNzIE5ldXRyYWxpbm9EbUZpbGVSZWFkZXIgZXh0ZW5kcyBCYXNlRG1GaWxlUmVhZGVyIGltcGxlbWVudHMgRG1GaWxlUmVhZGVyIHtcbiAgbmFtZTogc3RyaW5nXG4gIFxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZmlsZVBhdGg6IHN0cmluZyxcbiAgICBwdWJsaWMgZGlyZWN0b3J5OiBOZXV0cmFsaW5vRGlyZWN0b3J5TWFuYWdlcixcbiAgKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMubmFtZSA9IGZpbGVQYXRoLnNwbGl0KC9cXFxcfFxcLy8pLnBvcCgpIGFzIHN0cmluZ1xuICB9XG5cbiAgYXN5bmMgcmVhZFRleHRTdHJlYW0oXG4gICAgY2FsbGJhY2s6IHN0cmVhbUNhbGxiYWNrLFxuICAgIGNodW5rU2l6ZTogbnVtYmVyID0gODI5NDQgLy8gMTAyNCAqIDE4IGJlY2F1c2UgbG93IG51bWJlcnMgY2F1c2UgaXNzdWVzXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiByZWFkVGV4dFN0cmVhbSh0aGlzLmZpbGVQYXRoLCBjYWxsYmFjaywgY2h1bmtTaXplKVxuICB9XG5cbiAgYXN5bmMgc3RhdHMoKTogUHJvbWlzZTxGaWxlU3RhdHM+IHtcbiAgICBjb25zdCBzdGF0cyA9IGF3YWl0IGZzLmdldFN0YXRzKHRoaXMuZmlsZVBhdGgpXG4gICAgXG4gICAgY29uc3QgY2FzdGVkU3RhdHMgPSB7Li4uc3RhdHN9IGFzIGFueSBhcyBGaWxlU3RhdHNcbiAgICBjYXN0ZWRTdGF0cy5uYW1lID0gY2FzdGVkU3RhdHMubmFtZSB8fCB0aGlzLm5hbWVcbiAgICBjYXN0ZWRTdGF0cy5sYXN0TW9kaWZpZWQgPSBzdGF0cy5tb2RpZmllZEF0XG4gICAgY2FzdGVkU3RhdHMudHlwZSA9IHN0YXRzLmlzRmlsZSA/ICdmaWxlJyA6ICdkaXJlY3RvcnknXG4gICAgXG4gICAgcmV0dXJuIGNhc3RlZFN0YXRzXG4gIH1cblxuICBvdmVycmlkZSByZWFkQXNUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGZzLnJlYWRGaWxlKHRoaXMuZmlsZVBhdGgpIC8vIC50b1N0cmluZygpXG4gIH1cbiAgXG4gIGFzeW5jIHJlYWRBc0RhdGFVUkwoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBsZXQgZGF0YSA9IGF3YWl0IGZzLnJlYWRCaW5hcnlGaWxlKHRoaXMuZmlsZVBhdGgpXG4gICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgIHZhciBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCd1dGY4Jyk7XG4gICAgdmFyIGI2NGVuY29kZWQgPSBidG9hKGRlY29kZXIuZGVjb2RlKHZpZXcpKVxuICAgIHJldHVybiBiNjRlbmNvZGVkXG4gIH1cblxuICAvKipcbiAgICogMS4gQ3JlYXRlcyBhIGZpbGUgb2YgYSBzaW1pbGFyIG5hbWUgYW5kIHJlYWRzIGZyb20gc291cmNlIGZpbGVcbiAgICogMi4gV3JpdGVzIHRvIGNyZWF0ZWQgdmlhIGFwcGVuZCBjb21tYW5kc1xuICAgKiAzLiBUaGUgb3JpZ2luYWwgZmlsZSBpcyByZW5hbWVkIG9uIHN0cmVhbSBlbmRcbiAgICogNC4gVGhlIG5ldyBmaWxlIGlzIG5hbWVkIHRvIHRoZSBvcmlnaW5hbCBhbmQgdGhlbiBvcmlnaW5hbCBmaWxlIGlzIHRoZW4gZGVsZXRlZCAqL1xuICBhc3luYyByZWFkV3JpdGVUZXh0U3RyZWFtKFxuICAgIGNhbGxiYWNrOiBzdHJlYW1DYWxsYmFjayxcbiAgICBjaHVua1NpemU6IG51bWJlciA9IDEwMjQgKiAxMDI0LCAvLyAxIE1CXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHBhdGhUbyA9IHRoaXMuZGlyZWN0b3J5LnBhdGhcbiAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGhUbyArICcvJyArIHRoaXMubmFtZVxuICAgIHJldHVybiByZWFkV3JpdGVGaWxlKGZ1bGxQYXRoLCBjYWxsYmFjaywgY2h1bmtTaXplKVxuICB9XG5cbiAgYXN5bmMgd3JpdGUoZmlsZVN0cmluZzogc3RyaW5nIHwgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnMud3JpdGVGaWxlKHRoaXMuZmlsZVBhdGgsIGZpbGVTdHJpbmcpXG4gIH1cbn1cbiJdfQ==