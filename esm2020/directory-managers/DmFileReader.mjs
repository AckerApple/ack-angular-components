import { stringToXml } from "./stringToXml.function.ts";
export class BaseDmFileReader {
    async readXmlFirstElementContentByTagName(tagName) {
        const elements = await this.readXmlElementsByTagName(tagName);
        return elements.find(tag => tag.textContent)?.textContent;
    }
    async readXmlElementsByTagName(tagName) {
        const xml = await this.readAsXml();
        return new Array(...xml.getElementsByTagName(tagName));
    }
    async readXmlFirstElementByTagName(tagName) {
        const xml = await this.readAsXml();
        const elements = new Array(...xml.getElementsByTagName(tagName));
        return elements.length ? elements[0] : undefined;
    }
    async readAsXml() {
        const string = await this.readAsText();
        return stringToXml(string);
    }
    async readAsJson() {
        return JSON.parse(await this.readAsText());
    }
    readAsText() {
        throw new Error('no override provided for BaseDmFileReader.readAsText');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG1GaWxlUmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RpcmVjdG9yeS1tYW5hZ2Vycy9EbUZpbGVSZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBeUN2RCxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxPQUFlO1FBQ3ZELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzdELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUUsRUFBRSxXQUFXLENBQUE7SUFDNUQsQ0FBQztJQUVELEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxPQUFlO1FBQzVDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQ2xDLE9BQU8sSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFRLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRUQsS0FBSyxDQUFDLDRCQUE0QixDQUFDLE9BQWU7UUFDaEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDbEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFRLENBQUMsQ0FBQTtRQUN2RSxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO0lBQ2xELENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUztRQUNiLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ3RDLE9BQU8sV0FBVyxDQUFFLE1BQU0sQ0FBRSxDQUFBO0lBQzlCLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVTtRQUNkLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBO0lBQzVDLENBQUM7SUFFRCxVQUFVO1FBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFBO0lBQ3pFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdG9yeU1hbmFnZXIsIEZpbGVTdGF0cyB9IGZyb20gXCIuL0RpcmVjdG9yeU1hbmFnZXJzXCJcbmltcG9ydCB7IHN0cmluZ1RvWG1sIH0gZnJvbSBcIi4vc3RyaW5nVG9YbWwuZnVuY3Rpb24udHNcIlxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbVN0YXRzIHtcbiAgb2Zmc2V0OiBudW1iZXJcbiAgcGVyY2VudDogbnVtYmVyXG4gIGlzTGFzdDogYm9vbGVhblxuICBzdG9wOiAoKSA9PiB1bmtub3duIC8vIGEgZnVuY3Rpb24gdG8gYWxsb3cgY2FsbGVyIHRvIGNhbGwgZm9yIGEgc3RvcCBvZiBmaWxlIHN0cmVhbWluZy4gRHVyaW5nIGZpbGUgd3JpdGUgdGhpcyB3aWxsIGNhdXNlIGFuIGluY29tcGxldGUgZmlsZSAodXNlIGNhbmNlbCBpbnN0ZWFkKVxuICBjYW5jZWw6ICgpID0+IHVua25vd24gLy8gYSBmdW5jdGlvbiB0byBhbGxvdyBjYWxsZXIgdG8gY2FsbCBmb3IgYSBzdG9wIG9mIGZpbGUgc3RyZWFtaW5nLiBEdXJpbmcgZmlsZSB3cml0ZSB0aGlzIHdpbGwgcHJldmVudCB3cml0aW5nIGFuIGluY29tcGxldGUgZmlsZVxufVxuXG5leHBvcnQgdHlwZSBzdHJlYW1DYWxsYmFjayA9IChcbiAgc3RyaW5nOiBzdHJpbmcsXG4gIHN0YXRzOiBTdHJlYW1TdGF0c1xuKSA9PiBhbnlcblxuZXhwb3J0IGludGVyZmFjZSBEbUZpbGVSZWFkZXIge1xuICBkaXJlY3Rvcnk6IERpcmVjdG9yeU1hbmFnZXJcbiAgbmFtZTogc3RyaW5nXG4gIFxuICB3cml0ZTogKGZpbGVTdHJpbmc6IHN0cmluZyB8IEFycmF5QnVmZmVyKSA9PiBQcm9taXNlPHZvaWQ+XG4gIHJlYWRXcml0ZVRleHRTdHJlYW06IChcbiAgICBjYWxsYmFjazogc3RyZWFtQ2FsbGJhY2ssXG4gICAgY2h1bmtTaXplPzogbnVtYmVyLCAvLyAxIE1CIHNob3VsZCBiZSBkZWZhdWx0XG4gICkgPT4gUHJvbWlzZTx2b2lkPlxuICBcblxuICByZWFkQXNUZXh0OiAoKSA9PiBQcm9taXNlPHN0cmluZz5cbiAgcmVhZFRleHRTdHJlYW06IChcbiAgICBjYWxsYmFjazogc3RyZWFtQ2FsbGJhY2ssXG4gICAgY2h1bmtTaXplPzogbnVtYmVyLCAvLyBkZWZhdWx0IDEwMjRcbiAgKSA9PiBQcm9taXNlPHZvaWQ+XG4gIHJlYWRBc0pzb246ICgpID0+IFByb21pc2U8T2JqZWN0PlxuICByZWFkQXNEYXRhVVJMOiAoKSA9PiBQcm9taXNlPHN0cmluZz5cbiAgcmVhZEFzWG1sOiAoKSA9PiBQcm9taXNlPERvY3VtZW50PlxuICByZWFkWG1sRmlyc3RFbGVtZW50QnlUYWdOYW1lOiAodGFnTmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPEVsZW1lbnQgfCB1bmRlZmluZWQ+XG4gIHJlYWRYbWxFbGVtZW50c0J5VGFnTmFtZTogKHRhZ05hbWU6IHN0cmluZykgPT4gUHJvbWlzZTxFbGVtZW50W10+XG4gIHJlYWRYbWxGaXJzdEVsZW1lbnRDb250ZW50QnlUYWdOYW1lOiAodGFnTmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ+XG5cbiAgc3RhdHM6ICgpID0+IFByb21pc2U8RmlsZVN0YXRzPlxufVxuXG5leHBvcnQgY2xhc3MgQmFzZURtRmlsZVJlYWRlciB7XG4gIGFzeW5jIHJlYWRYbWxGaXJzdEVsZW1lbnRDb250ZW50QnlUYWdOYW1lKHRhZ05hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gYXdhaXQgdGhpcy5yZWFkWG1sRWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSlcbiAgICByZXR1cm4gZWxlbWVudHMuZmluZCh0YWcgPT4gdGFnLnRleHRDb250ZW50ICk/LnRleHRDb250ZW50XG4gIH1cblxuICBhc3luYyByZWFkWG1sRWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZTogc3RyaW5nKTogUHJvbWlzZTxFbGVtZW50W10+IHtcbiAgICBjb25zdCB4bWwgPSBhd2FpdCB0aGlzLnJlYWRBc1htbCgpXG4gICAgcmV0dXJuIG5ldyBBcnJheSguLi54bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSkgYXMgYW55KVxuICB9XG5cbiAgYXN5bmMgcmVhZFhtbEZpcnN0RWxlbWVudEJ5VGFnTmFtZSh0YWdOYW1lOiBzdHJpbmcpOiBQcm9taXNlPEVsZW1lbnQgfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCB4bWwgPSBhd2FpdCB0aGlzLnJlYWRBc1htbCgpXG4gICAgY29uc3QgZWxlbWVudHMgPSBuZXcgQXJyYXkoLi4ueG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpIGFzIGFueSlcbiAgICByZXR1cm4gZWxlbWVudHMubGVuZ3RoID8gZWxlbWVudHNbMF0gOiB1bmRlZmluZWRcbiAgfVxuXG4gIGFzeW5jIHJlYWRBc1htbCgpOiBQcm9taXNlPERvY3VtZW50PiB7XG4gICAgY29uc3Qgc3RyaW5nID0gYXdhaXQgdGhpcy5yZWFkQXNUZXh0KClcbiAgICByZXR1cm4gc3RyaW5nVG9YbWwoIHN0cmluZyApXG4gIH1cbiAgXG4gIGFzeW5jIHJlYWRBc0pzb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShhd2FpdCB0aGlzLnJlYWRBc1RleHQoKSlcbiAgfVxuICBcbiAgcmVhZEFzVGV4dCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRocm93IG5ldyBFcnJvcignbm8gb3ZlcnJpZGUgcHJvdmlkZWQgZm9yIEJhc2VEbUZpbGVSZWFkZXIucmVhZEFzVGV4dCcpXG4gIH1cbn1cbiJdfQ==