import { stringToXml } from "./stringToXml.function.ts";
export class BaseDmFileReader {
    async readXmlFirstElementContentByTagName(tagName) {
        const elements = await this.readXmlElementsByTagName(tagName);
        return elements.find(tag => tag.textContent)?.textContent;
    }
    async readXmlElementsByTagName(tagName) {
        const xml = await this.readAsXml();
        return new Array(...xml.getElementsByTagName(tagName));
    }
    async readXmlFirstElementByTagName(tagName) {
        const xml = await this.readAsXml();
        const elements = new Array(...xml.getElementsByTagName(tagName));
        return elements.length ? elements[0] : undefined;
    }
    async readAsXml() {
        const string = await this.readAsText();
        return stringToXml(string);
    }
    async readAsJson() {
        return JSON.parse(await this.readAsText());
    }
    readAsText() {
        throw new Error('no override provided for BaseDmFileReader.readAsText');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG1GaWxlUmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RpcmVjdG9yeS1tYW5hZ2Vycy9EbUZpbGVSZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBdUN2RCxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxPQUFlO1FBQ3ZELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzdELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUUsRUFBRSxXQUFXLENBQUE7SUFDNUQsQ0FBQztJQUVELEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxPQUFlO1FBQzVDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQ2xDLE9BQU8sSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFRLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRUQsS0FBSyxDQUFDLDRCQUE0QixDQUFDLE9BQWU7UUFDaEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDbEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFRLENBQUMsQ0FBQTtRQUN2RSxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO0lBQ2xELENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUztRQUNiLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ3RDLE9BQU8sV0FBVyxDQUFFLE1BQU0sQ0FBRSxDQUFBO0lBQzlCLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVTtRQUNkLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBO0lBQzVDLENBQUM7SUFFRCxVQUFVO1FBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFBO0lBQ3pFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdG9yeU1hbmFnZXIsIEZpbGVTdGF0cyB9IGZyb20gXCIuL0RpcmVjdG9yeU1hbmFnZXJzXCJcbmltcG9ydCB7IHN0cmluZ1RvWG1sIH0gZnJvbSBcIi4vc3RyaW5nVG9YbWwuZnVuY3Rpb24udHNcIlxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbVN0YXRzIHtcbiAgb2Zmc2V0OiBudW1iZXIsXG4gIHBlcmNlbnQ6IG51bWJlcixcbiAgaXNMYXN0OiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIHN0cmVhbUNhbGxiYWNrID0gKFxuICBzdHJpbmc6IHN0cmluZyxcbiAgc3RhdHM6IFN0cmVhbVN0YXRzXG4pID0+IGFueVxuXG5leHBvcnQgaW50ZXJmYWNlIERtRmlsZVJlYWRlciB7XG4gIGRpcmVjdG9yeTogRGlyZWN0b3J5TWFuYWdlclxuICBuYW1lOiBzdHJpbmdcbiAgXG4gIHdyaXRlOiAoZmlsZVN0cmluZzogc3RyaW5nIHwgQXJyYXlCdWZmZXIpID0+IFByb21pc2U8dm9pZD5cbiAgcmVhZFdyaXRlVGV4dFN0cmVhbTogKFxuICAgIGNhbGxiYWNrOiBzdHJlYW1DYWxsYmFjayxcbiAgICBjaHVua1NpemU/OiBudW1iZXIsIC8vIDEgTUIgc2hvdWxkIGJlIGRlZmF1bHRcbiAgKSA9PiBQcm9taXNlPHZvaWQ+XG4gIFxuXG4gIHJlYWRBc1RleHQ6ICgpID0+IFByb21pc2U8c3RyaW5nPlxuICByZWFkVGV4dFN0cmVhbTogKFxuICAgIGNhbGxiYWNrOiBzdHJlYW1DYWxsYmFjayxcbiAgICBjaHVua1NpemU/OiBudW1iZXIsIC8vIGRlZmF1bHQgMTAyNFxuICApID0+IFByb21pc2U8dm9pZD5cbiAgcmVhZEFzSnNvbjogKCkgPT4gUHJvbWlzZTxPYmplY3Q+XG4gIHJlYWRBc0RhdGFVUkw6ICgpID0+IFByb21pc2U8c3RyaW5nPlxuICByZWFkQXNYbWw6ICgpID0+IFByb21pc2U8RG9jdW1lbnQ+XG4gIHJlYWRYbWxGaXJzdEVsZW1lbnRCeVRhZ05hbWU6ICh0YWdOYW1lOiBzdHJpbmcpID0+IFByb21pc2U8RWxlbWVudCB8IHVuZGVmaW5lZD5cbiAgcmVhZFhtbEVsZW1lbnRzQnlUYWdOYW1lOiAodGFnTmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPEVsZW1lbnRbXT5cbiAgcmVhZFhtbEZpcnN0RWxlbWVudENvbnRlbnRCeVRhZ05hbWU6ICh0YWdOYW1lOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZD5cblxuICBzdGF0czogKCkgPT4gUHJvbWlzZTxGaWxlU3RhdHM+XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlRG1GaWxlUmVhZGVyIHtcbiAgYXN5bmMgcmVhZFhtbEZpcnN0RWxlbWVudENvbnRlbnRCeVRhZ05hbWUodGFnTmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCB0aGlzLnJlYWRYbWxFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKVxuICAgIHJldHVybiBlbGVtZW50cy5maW5kKHRhZyA9PiB0YWcudGV4dENvbnRlbnQgKT8udGV4dENvbnRlbnRcbiAgfVxuXG4gIGFzeW5jIHJlYWRYbWxFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lOiBzdHJpbmcpOiBQcm9taXNlPEVsZW1lbnRbXT4ge1xuICAgIGNvbnN0IHhtbCA9IGF3YWl0IHRoaXMucmVhZEFzWG1sKClcbiAgICByZXR1cm4gbmV3IEFycmF5KC4uLnhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKSBhcyBhbnkpXG4gIH1cblxuICBhc3luYyByZWFkWG1sRmlyc3RFbGVtZW50QnlUYWdOYW1lKHRhZ05hbWU6IHN0cmluZyk6IFByb21pc2U8RWxlbWVudCB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IHhtbCA9IGF3YWl0IHRoaXMucmVhZEFzWG1sKClcbiAgICBjb25zdCBlbGVtZW50cyA9IG5ldyBBcnJheSguLi54bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSkgYXMgYW55KVxuICAgIHJldHVybiBlbGVtZW50cy5sZW5ndGggPyBlbGVtZW50c1swXSA6IHVuZGVmaW5lZFxuICB9XG5cbiAgYXN5bmMgcmVhZEFzWG1sKCk6IFByb21pc2U8RG9jdW1lbnQ+IHtcbiAgICBjb25zdCBzdHJpbmcgPSBhd2FpdCB0aGlzLnJlYWRBc1RleHQoKVxuICAgIHJldHVybiBzdHJpbmdUb1htbCggc3RyaW5nIClcbiAgfVxuICBcbiAgYXN5bmMgcmVhZEFzSnNvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGF3YWl0IHRoaXMucmVhZEFzVGV4dCgpKVxuICB9XG4gIFxuICByZWFkQXNUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdubyBvdmVycmlkZSBwcm92aWRlZCBmb3IgQmFzZURtRmlsZVJlYWRlci5yZWFkQXNUZXh0JylcbiAgfVxufVxuIl19