/**  This function reads a file from the user's file system and returns an Observable that emits slices of the file */
export function readFileStream(file, chunkSize = 1024 * 1024, // 1MB,
eachString = (string) => undefined, { awaitEach = false } = {}) {
    const fileSize = file.size;
    let offset = 0;
    let stopped = false;
    return new Promise((res, rej) => {
        const stop = () => {
            stopped = true;
        };
        const cancel = stop;
        /** onload means when data loaded not just the first time */
        const onread = async (result) => {
            const promise = eachString(result, {
                isLast: (offset + chunkSize) >= fileSize,
                percent: offset / fileSize * 100,
                offset,
                stop,
                cancel
            });
            if (awaitEach) {
                await promise;
            }
            // increment
            offset += chunkSize;
        };
        if (!stopped && offset < fileSize) {
            readSlice();
        }
        else {
            res();
        }
        function readSlice() {
            const slice = file.slice(offset, offset + chunkSize); // comes back as Blob
            // convert Blob to string
            slice.text().then(fileContent => onread(fileContent)).catch(e => rej(e));
        }
        readSlice();
    });
}
export async function readWriteFile(file, fileHandle, transformFn, // aka callback
chunkSize = 1024 * 1024, // 1 MB
options) {
    const writableStream = await fileHandle.createWritable(); // Open a writable stream for the file
    const onString = async (string, stats) => {
        const originalStop = stats.stop;
        stats.stop = () => {
            originalStop(); // call the stop we are wrapping
            writableStream.close();
        };
        stats.cancel = () => {
            originalStop(); // call the stop we are wrapping
            writableStream.abort();
        };
        return writableStream.write(await transformFn(string, stats));
    };
    await file.readTextStream(onString, chunkSize, options);
    await writableStream.close();
    writableStream.truncate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZEZpbGVTdHJlYW0uZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0b3J5LW1hbmFnZXJzL3JlYWRGaWxlU3RyZWFtLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHNIQUFzSDtBQUN0SCxNQUFNLFVBQVUsY0FBYyxDQUM1QixJQUFVLEVBQ1YsWUFBb0IsSUFBSSxHQUFHLElBQUksRUFBRSxPQUFPO0FBQ3hDLGFBQTZCLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQzFELEVBQUMsU0FBUyxHQUFDLEtBQUssS0FBbUIsRUFBRTtJQUVyQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFBO0lBQzFCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUNkLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQTtJQUVuQixPQUFPLElBQUksT0FBTyxDQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtZQUNoQixPQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLENBQUMsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQTtRQUVuQiw0REFBNEQ7UUFDNUQsTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxFQUFFO1lBQ3RDLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FDeEIsTUFBZ0IsRUFBRTtnQkFDaEIsTUFBTSxFQUFFLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLFFBQVE7Z0JBQ3hDLE9BQU8sRUFBRSxNQUFNLEdBQUcsUUFBUSxHQUFHLEdBQUc7Z0JBQ2hDLE1BQU07Z0JBQ04sSUFBSTtnQkFDSixNQUFNO2FBQ1AsQ0FDRixDQUFBO1lBRUQsSUFBSyxTQUFTLEVBQUc7Z0JBQ2YsTUFBTSxPQUFPLENBQUE7YUFDZDtZQUVELFlBQVk7WUFDWixNQUFNLElBQUksU0FBUyxDQUFBO1FBQ3JCLENBQUMsQ0FBQTtRQUVELElBQUksQ0FBQyxPQUFPLElBQUksTUFBTSxHQUFHLFFBQVEsRUFBRTtZQUNqQyxTQUFTLEVBQUUsQ0FBQTtTQUNaO2FBQU07WUFDTCxHQUFHLEVBQUUsQ0FBQTtTQUNOO1FBRUQsU0FBUyxTQUFTO1lBQ2hCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQSxDQUFDLHFCQUFxQjtZQUUxRSx5QkFBeUI7WUFDekIsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzFFLENBQUM7UUFFRCxTQUFTLEVBQUUsQ0FBQTtJQUNiLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUNqQyxJQUFrQixFQUNsQixVQUFnQyxFQUNoQyxXQUdXLEVBQUUsZUFBZTtBQUM1QixTQUFTLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRSxPQUFPO0FBQ2hDLE9BQXVCO0lBRXZCLE1BQU0sY0FBYyxHQUFHLE1BQU0sVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFBLENBQUMsc0NBQXNDO0lBQy9GLE1BQU0sUUFBUSxHQUFtQixLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3ZELE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUE7UUFDL0IsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDaEIsWUFBWSxFQUFFLENBQUEsQ0FBQyxnQ0FBZ0M7WUFDL0MsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hCLENBQUMsQ0FBQTtRQUNELEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLFlBQVksRUFBRSxDQUFBLENBQUMsZ0NBQWdDO1lBQy9DLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN4QixDQUFDLENBQUE7UUFFRCxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQ3pCLE1BQU0sV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FDakMsQ0FBQTtJQUNILENBQUMsQ0FBQTtJQUVELE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQzVCLGNBQWMsQ0FBQyxRQUFRLENBQUE7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERtRmlsZVJlYWRlciwgc3RyZWFtQ2FsbGJhY2ssIFN0cmVhbU9wdGlvbnMsIFN0cmVhbVN0YXRzIH0gZnJvbSBcIi4vRG1GaWxlUmVhZGVyXCJcblxuLyoqICBUaGlzIGZ1bmN0aW9uIHJlYWRzIGEgZmlsZSBmcm9tIHRoZSB1c2VyJ3MgZmlsZSBzeXN0ZW0gYW5kIHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHNsaWNlcyBvZiB0aGUgZmlsZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlU3RyZWFtKFxuICBmaWxlOiBGaWxlLFxuICBjaHVua1NpemU6IG51bWJlciA9IDEwMjQgKiAxMDI0LCAvLyAxTUIsXG4gIGVhY2hTdHJpbmc6IHN0cmVhbUNhbGxiYWNrID0gKHN0cmluZzogc3RyaW5nKSA9PiB1bmRlZmluZWQsXG4gIHthd2FpdEVhY2g9ZmFsc2V9OiBTdHJlYW1PcHRpb25zID0ge31cbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBmaWxlU2l6ZSA9IGZpbGUuc2l6ZVxuICBsZXQgb2Zmc2V0ID0gMFxuICBsZXQgc3RvcHBlZCA9IGZhbHNlXG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXMsIHJlaikgPT4ge1xuICAgIGNvbnN0IHN0b3AgPSAoKSA9PiB7XG4gICAgICBzdG9wcGVkID0gdHJ1ZVxuICAgIH1cbiAgICBjb25zdCBjYW5jZWwgPSBzdG9wXG4gIFxuICAgIC8qKiBvbmxvYWQgbWVhbnMgd2hlbiBkYXRhIGxvYWRlZCBub3QganVzdCB0aGUgZmlyc3QgdGltZSAqL1xuICAgIGNvbnN0IG9ucmVhZCA9IGFzeW5jIChyZXN1bHQ6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgcHJvbWlzZSA9IGVhY2hTdHJpbmcoXG4gICAgICAgIHJlc3VsdCBhcyBzdHJpbmcsIHtcbiAgICAgICAgICBpc0xhc3Q6IChvZmZzZXQgKyBjaHVua1NpemUpID49IGZpbGVTaXplLFxuICAgICAgICAgIHBlcmNlbnQ6IG9mZnNldCAvIGZpbGVTaXplICogMTAwLFxuICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICBzdG9wLFxuICAgICAgICAgIGNhbmNlbFxuICAgICAgICB9XG4gICAgICApXG5cbiAgICAgIGlmICggYXdhaXRFYWNoICkge1xuICAgICAgICBhd2FpdCBwcm9taXNlXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIGluY3JlbWVudFxuICAgICAgb2Zmc2V0ICs9IGNodW5rU2l6ZVxuICAgIH1cblxuICAgIGlmICghc3RvcHBlZCAmJiBvZmZzZXQgPCBmaWxlU2l6ZSkge1xuICAgICAgcmVhZFNsaWNlKClcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkU2xpY2UoKSB7XG4gICAgICBjb25zdCBzbGljZSA9IGZpbGUuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBjaHVua1NpemUpIC8vIGNvbWVzIGJhY2sgYXMgQmxvYlxuICAgICAgXG4gICAgICAvLyBjb252ZXJ0IEJsb2IgdG8gc3RyaW5nXG4gICAgICBzbGljZS50ZXh0KCkudGhlbihmaWxlQ29udGVudCA9PiBvbnJlYWQoZmlsZUNvbnRlbnQpKS5jYXRjaChlID0+IHJlaihlKSlcbiAgICB9XG5cbiAgICByZWFkU2xpY2UoKVxuICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZFdyaXRlRmlsZShcbiAgZmlsZTogRG1GaWxlUmVhZGVyLFxuICBmaWxlSGFuZGxlOiBGaWxlU3lzdGVtRmlsZUhhbmRsZSxcbiAgdHJhbnNmb3JtRm46IChcbiAgICBjaHVuazogc3RyaW5nLFxuICAgIHN0YXRzOiBTdHJlYW1TdGF0c1xuICApID0+IHN0cmluZywgLy8gYWthIGNhbGxiYWNrXG4gIGNodW5rU2l6ZSA9IDEwMjQgKiAxMDI0LCAvLyAxIE1CXG4gIG9wdGlvbnM/OiBTdHJlYW1PcHRpb25zXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgd3JpdGFibGVTdHJlYW0gPSBhd2FpdCBmaWxlSGFuZGxlLmNyZWF0ZVdyaXRhYmxlKCkgLy8gT3BlbiBhIHdyaXRhYmxlIHN0cmVhbSBmb3IgdGhlIGZpbGVcbiAgY29uc3Qgb25TdHJpbmc6IHN0cmVhbUNhbGxiYWNrID0gYXN5bmMgKHN0cmluZywgc3RhdHMpID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBzdGF0cy5zdG9wXG4gICAgc3RhdHMuc3RvcCA9ICgpID0+IHtcbiAgICAgIG9yaWdpbmFsU3RvcCgpIC8vIGNhbGwgdGhlIHN0b3Agd2UgYXJlIHdyYXBwaW5nXG4gICAgICB3cml0YWJsZVN0cmVhbS5jbG9zZSgpXG4gICAgfVxuICAgIHN0YXRzLmNhbmNlbCA9ICgpID0+IHtcbiAgICAgIG9yaWdpbmFsU3RvcCgpIC8vIGNhbGwgdGhlIHN0b3Agd2UgYXJlIHdyYXBwaW5nXG4gICAgICB3cml0YWJsZVN0cmVhbS5hYm9ydCgpXG4gICAgfVxuICAgICAgICBcbiAgICByZXR1cm4gd3JpdGFibGVTdHJlYW0ud3JpdGUoXG4gICAgICBhd2FpdCB0cmFuc2Zvcm1GbihzdHJpbmcsIHN0YXRzKVxuICAgIClcbiAgfVxuICBcbiAgYXdhaXQgZmlsZS5yZWFkVGV4dFN0cmVhbShvblN0cmluZywgY2h1bmtTaXplLCBvcHRpb25zKVxuICBhd2FpdCB3cml0YWJsZVN0cmVhbS5jbG9zZSgpXG4gIHdyaXRhYmxlU3RyZWFtLnRydW5jYXRlXG59XG4iXX0=