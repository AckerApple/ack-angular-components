/**  This function reads a file from the user's file system and returns an Observable that emits slices of the file */
export function readFileStream(file, chunkSize = 1024 * 1024, // 1MB,
eachString = (string) => undefined, { awaitEach = false } = {}) {
    const fileSize = file.size;
    let offset = 0;
    let stopped = false;
    return new Promise((res, rej) => {
        const stop = () => {
            stopped = true;
        };
        const cancel = stop;
        /** onload means when data loaded not just the first time */
        const onread = async (result) => {
            const promise = eachString(result, {
                isLast: (offset + chunkSize) >= fileSize,
                percent: offset / fileSize * 100,
                offset,
                stop,
                cancel
            });
            if (awaitEach) {
                await promise;
            }
            // increment
            offset += chunkSize;
            if (!stopped && offset < fileSize) {
                readSlice();
            }
            else {
                res();
            }
        };
        function readSlice() {
            const slice = file.slice(offset, offset + chunkSize); // comes back as Blob
            // convert Blob to string
            slice.text().then(fileContent => onread(fileContent)).catch(e => rej(e));
        }
        readSlice();
    });
}
export async function readWriteFile(file, fileHandle, transformFn, // aka callback
chunkSize = 1024 * 1024, // 1 MB
options) {
    const writableStream = await fileHandle.createWritable(); // Open a writable stream for the file
    const onString = async (string, stats) => {
        const originalStop = stats.stop;
        stats.stop = () => {
            originalStop(); // call the stop we are wrapping
            writableStream.close();
        };
        stats.cancel = () => {
            originalStop(); // call the stop we are wrapping
            writableStream.abort();
        };
        return writableStream.write(await transformFn(string, stats));
    };
    await file.readTextStream(onString, chunkSize, options);
    await writableStream.close();
    writableStream.truncate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZEZpbGVTdHJlYW0uZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0b3J5LW1hbmFnZXJzL3JlYWRGaWxlU3RyZWFtLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHNIQUFzSDtBQUN0SCxNQUFNLFVBQVUsY0FBYyxDQUM1QixJQUFVLEVBQ1YsWUFBb0IsSUFBSSxHQUFHLElBQUksRUFBRSxPQUFPO0FBQ3hDLGFBQTZCLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQzFELEVBQUMsU0FBUyxHQUFDLEtBQUssS0FBbUIsRUFBRTtJQUVyQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFBO0lBQzFCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUNkLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQTtJQUVuQixPQUFPLElBQUksT0FBTyxDQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtZQUNoQixPQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLENBQUMsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQTtRQUVuQiw0REFBNEQ7UUFDNUQsTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxFQUFFO1lBQ3RDLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FDeEIsTUFBZ0IsRUFBRTtnQkFDaEIsTUFBTSxFQUFFLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLFFBQVE7Z0JBQ3hDLE9BQU8sRUFBRSxNQUFNLEdBQUcsUUFBUSxHQUFHLEdBQUc7Z0JBQ2hDLE1BQU07Z0JBQ04sSUFBSTtnQkFDSixNQUFNO2FBQ1AsQ0FDRixDQUFBO1lBRUQsSUFBSyxTQUFTLEVBQUc7Z0JBQ2YsTUFBTSxPQUFPLENBQUE7YUFDZDtZQUVELFlBQVk7WUFDWixNQUFNLElBQUksU0FBUyxDQUFBO1lBRW5CLElBQUksQ0FBQyxPQUFPLElBQUksTUFBTSxHQUFHLFFBQVEsRUFBRTtnQkFDakMsU0FBUyxFQUFFLENBQUE7YUFDWjtpQkFBTTtnQkFDTCxHQUFHLEVBQUUsQ0FBQTthQUNOO1FBQ0gsQ0FBQyxDQUFBO1FBR0QsU0FBUyxTQUFTO1lBQ2hCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQSxDQUFDLHFCQUFxQjtZQUUxRSx5QkFBeUI7WUFDekIsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzFFLENBQUM7UUFFRCxTQUFTLEVBQUUsQ0FBQTtJQUNiLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUNqQyxJQUFrQixFQUNsQixVQUFnQyxFQUNoQyxXQUdXLEVBQUUsZUFBZTtBQUM1QixTQUFTLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRSxPQUFPO0FBQ2hDLE9BQXVCO0lBRXZCLE1BQU0sY0FBYyxHQUFHLE1BQU0sVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFBLENBQUMsc0NBQXNDO0lBQy9GLE1BQU0sUUFBUSxHQUFtQixLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3ZELE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUE7UUFDL0IsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDaEIsWUFBWSxFQUFFLENBQUEsQ0FBQyxnQ0FBZ0M7WUFDL0MsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hCLENBQUMsQ0FBQTtRQUNELEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLFlBQVksRUFBRSxDQUFBLENBQUMsZ0NBQWdDO1lBQy9DLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN4QixDQUFDLENBQUE7UUFFRCxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQ3pCLE1BQU0sV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FDakMsQ0FBQTtJQUNILENBQUMsQ0FBQTtJQUVELE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQzVCLGNBQWMsQ0FBQyxRQUFRLENBQUE7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERtRmlsZVJlYWRlciwgc3RyZWFtQ2FsbGJhY2ssIFN0cmVhbU9wdGlvbnMsIFN0cmVhbVN0YXRzIH0gZnJvbSBcIi4vRG1GaWxlUmVhZGVyXCJcblxuLyoqICBUaGlzIGZ1bmN0aW9uIHJlYWRzIGEgZmlsZSBmcm9tIHRoZSB1c2VyJ3MgZmlsZSBzeXN0ZW0gYW5kIHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHNsaWNlcyBvZiB0aGUgZmlsZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlU3RyZWFtKFxuICBmaWxlOiBGaWxlLFxuICBjaHVua1NpemU6IG51bWJlciA9IDEwMjQgKiAxMDI0LCAvLyAxTUIsXG4gIGVhY2hTdHJpbmc6IHN0cmVhbUNhbGxiYWNrID0gKHN0cmluZzogc3RyaW5nKSA9PiB1bmRlZmluZWQsXG4gIHthd2FpdEVhY2g9ZmFsc2V9OiBTdHJlYW1PcHRpb25zID0ge31cbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBmaWxlU2l6ZSA9IGZpbGUuc2l6ZVxuICBsZXQgb2Zmc2V0ID0gMFxuICBsZXQgc3RvcHBlZCA9IGZhbHNlXG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXMsIHJlaikgPT4ge1xuICAgIGNvbnN0IHN0b3AgPSAoKSA9PiB7XG4gICAgICBzdG9wcGVkID0gdHJ1ZVxuICAgIH1cbiAgICBjb25zdCBjYW5jZWwgPSBzdG9wXG4gIFxuICAgIC8qKiBvbmxvYWQgbWVhbnMgd2hlbiBkYXRhIGxvYWRlZCBub3QganVzdCB0aGUgZmlyc3QgdGltZSAqL1xuICAgIGNvbnN0IG9ucmVhZCA9IGFzeW5jIChyZXN1bHQ6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgcHJvbWlzZSA9IGVhY2hTdHJpbmcoXG4gICAgICAgIHJlc3VsdCBhcyBzdHJpbmcsIHtcbiAgICAgICAgICBpc0xhc3Q6IChvZmZzZXQgKyBjaHVua1NpemUpID49IGZpbGVTaXplLFxuICAgICAgICAgIHBlcmNlbnQ6IG9mZnNldCAvIGZpbGVTaXplICogMTAwLFxuICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICBzdG9wLFxuICAgICAgICAgIGNhbmNlbFxuICAgICAgICB9XG4gICAgICApXG5cbiAgICAgIGlmICggYXdhaXRFYWNoICkge1xuICAgICAgICBhd2FpdCBwcm9taXNlXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIGluY3JlbWVudFxuICAgICAgb2Zmc2V0ICs9IGNodW5rU2l6ZVxuIFxuICAgICAgaWYgKCFzdG9wcGVkICYmIG9mZnNldCA8IGZpbGVTaXplKSB7XG4gICAgICAgIHJlYWRTbGljZSgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMoKVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gcmVhZFNsaWNlKCkge1xuICAgICAgY29uc3Qgc2xpY2UgPSBmaWxlLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgY2h1bmtTaXplKSAvLyBjb21lcyBiYWNrIGFzIEJsb2JcbiAgICAgIFxuICAgICAgLy8gY29udmVydCBCbG9iIHRvIHN0cmluZ1xuICAgICAgc2xpY2UudGV4dCgpLnRoZW4oZmlsZUNvbnRlbnQgPT4gb25yZWFkKGZpbGVDb250ZW50KSkuY2F0Y2goZSA9PiByZWooZSkpXG4gICAgfVxuXG4gICAgcmVhZFNsaWNlKClcbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRXcml0ZUZpbGUoXG4gIGZpbGU6IERtRmlsZVJlYWRlcixcbiAgZmlsZUhhbmRsZTogRmlsZVN5c3RlbUZpbGVIYW5kbGUsXG4gIHRyYW5zZm9ybUZuOiAoXG4gICAgY2h1bms6IHN0cmluZyxcbiAgICBzdGF0czogU3RyZWFtU3RhdHNcbiAgKSA9PiBzdHJpbmcsIC8vIGFrYSBjYWxsYmFja1xuICBjaHVua1NpemUgPSAxMDI0ICogMTAyNCwgLy8gMSBNQlxuICBvcHRpb25zPzogU3RyZWFtT3B0aW9uc1xuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHdyaXRhYmxlU3RyZWFtID0gYXdhaXQgZmlsZUhhbmRsZS5jcmVhdGVXcml0YWJsZSgpIC8vIE9wZW4gYSB3cml0YWJsZSBzdHJlYW0gZm9yIHRoZSBmaWxlXG4gIGNvbnN0IG9uU3RyaW5nOiBzdHJlYW1DYWxsYmFjayA9IGFzeW5jIChzdHJpbmcsIHN0YXRzKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxTdG9wID0gc3RhdHMuc3RvcFxuICAgIHN0YXRzLnN0b3AgPSAoKSA9PiB7XG4gICAgICBvcmlnaW5hbFN0b3AoKSAvLyBjYWxsIHRoZSBzdG9wIHdlIGFyZSB3cmFwcGluZ1xuICAgICAgd3JpdGFibGVTdHJlYW0uY2xvc2UoKVxuICAgIH1cbiAgICBzdGF0cy5jYW5jZWwgPSAoKSA9PiB7XG4gICAgICBvcmlnaW5hbFN0b3AoKSAvLyBjYWxsIHRoZSBzdG9wIHdlIGFyZSB3cmFwcGluZ1xuICAgICAgd3JpdGFibGVTdHJlYW0uYWJvcnQoKVxuICAgIH1cbiAgICAgICAgXG4gICAgcmV0dXJuIHdyaXRhYmxlU3RyZWFtLndyaXRlKFxuICAgICAgYXdhaXQgdHJhbnNmb3JtRm4oc3RyaW5nLCBzdGF0cylcbiAgICApXG4gIH1cbiAgXG4gIGF3YWl0IGZpbGUucmVhZFRleHRTdHJlYW0ob25TdHJpbmcsIGNodW5rU2l6ZSwgb3B0aW9ucylcbiAgYXdhaXQgd3JpdGFibGVTdHJlYW0uY2xvc2UoKVxuICB3cml0YWJsZVN0cmVhbS50cnVuY2F0ZVxufVxuIl19