/**  This function reads a file from the user's file system and returns an Observable that emits slices of the file */
export function readFileStream(file, chunkSize = 1024 * 1024, // 1MB,
eachString = (string) => undefined) {
    const fileSize = file.size;
    let offset = 0;
    let stopped = false;
    return new Promise((res, rej) => {
        const reader = new FileReader();
        const stop = () => {
            stopped = true;
            reader.abort();
        };
        const cancel = stop;
        reader.onload = (event) => {
            if (event.target?.result) {
                eachString(event.target.result, {
                    isLast: (offset + chunkSize) >= fileSize,
                    percent: offset / fileSize * 100,
                    offset,
                    stop,
                    cancel
                });
                // increment
                offset += chunkSize;
            }
            if (!stopped && offset < fileSize) {
                readSlice();
            }
            else {
                res();
            }
        };
        reader.onerror = rej;
        function readSlice() {
            const slice = file.slice(offset, offset + chunkSize);
            reader.readAsText(slice);
        }
        readSlice();
        // return () => reader.abort()
    });
}
export async function readWriteFile(file, fileHandle, transformFn, // aka callback
chunkSize = 1024 * 1024) {
    const writableStream = await fileHandle.createWritable(); // Open a writable stream for the file
    const onString = async (string, stats) => {
        const originalStop = stats.stop;
        stats.stop = () => {
            originalStop(); // call the stop we are wrapping
            writableStream.close();
        };
        stats.cancel = () => {
            originalStop(); // call the stop we are wrapping
            writableStream.abort();
        };
        return writableStream.write(await transformFn(string, stats));
    };
    await file.readTextStream(onString, chunkSize);
    await writableStream.close();
    writableStream.truncate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZEZpbGVTdHJlYW0uZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0b3J5LW1hbmFnZXJzL3JlYWRGaWxlU3RyZWFtLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHNIQUFzSDtBQUN0SCxNQUFNLFVBQVUsY0FBYyxDQUM1QixJQUFVLEVBQ1YsWUFBb0IsSUFBSSxHQUFHLElBQUksRUFBRSxPQUFPO0FBQ3hDLGFBQTZCLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxTQUFTO0lBRTFELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDMUIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFBO0lBQ2QsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFBO0lBRW5CLE9BQU8sSUFBSSxPQUFPLENBQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQTtRQUUvQixNQUFNLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDaEIsT0FBTyxHQUFHLElBQUksQ0FBQTtZQUNkLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNoQixDQUFDLENBQUE7UUFDRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUE7UUFFbkIsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3hCLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7Z0JBQ3hCLFVBQVUsQ0FDUixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWdCLEVBQUU7b0JBQzdCLE1BQU0sRUFBRSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsSUFBSSxRQUFRO29CQUN4QyxPQUFPLEVBQUUsTUFBTSxHQUFHLFFBQVEsR0FBRyxHQUFHO29CQUNoQyxNQUFNO29CQUNOLElBQUk7b0JBQ0osTUFBTTtpQkFDUCxDQUNGLENBQUE7Z0JBRUQsWUFBWTtnQkFDWixNQUFNLElBQUksU0FBUyxDQUFBO2FBQ3BCO1lBRUQsSUFBSSxDQUFDLE9BQU8sSUFBSSxNQUFNLEdBQUcsUUFBUSxFQUFFO2dCQUNqQyxTQUFTLEVBQUUsQ0FBQTthQUNaO2lCQUFNO2dCQUNMLEdBQUcsRUFBRSxDQUFBO2FBQ047UUFDSCxDQUFDLENBQUE7UUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQTtRQUVwQixTQUFTLFNBQVM7WUFDaEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFBO1lBQ3BELE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDMUIsQ0FBQztRQUVELFNBQVMsRUFBRSxDQUFBO1FBQ1gsOEJBQThCO0lBQ2hDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUdELE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUNqQyxJQUFrQixFQUNsQixVQUFnQyxFQUNoQyxXQUdXLEVBQUUsZUFBZTtBQUM1QixTQUFTLEdBQUcsSUFBSSxHQUFHLElBQUk7SUFFdkIsTUFBTSxjQUFjLEdBQUcsTUFBTSxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUEsQ0FBQyxzQ0FBc0M7SUFDL0YsTUFBTSxRQUFRLEdBQW1CLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDdkQsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQTtRQUMvQixLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRTtZQUNoQixZQUFZLEVBQUUsQ0FBQSxDQUFDLGdDQUFnQztZQUMvQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDeEIsQ0FBQyxDQUFBO1FBQ0QsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDbEIsWUFBWSxFQUFFLENBQUEsQ0FBQyxnQ0FBZ0M7WUFDL0MsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hCLENBQUMsQ0FBQTtRQUVELE9BQU8sY0FBYyxDQUFDLEtBQUssQ0FDekIsTUFBTSxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUNqQyxDQUFBO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUM5QyxNQUFNLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM1QixjQUFjLENBQUMsUUFBUSxDQUFBO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEbUZpbGVSZWFkZXIsIHN0cmVhbUNhbGxiYWNrLCBTdHJlYW1TdGF0cyB9IGZyb20gXCIuL0RtRmlsZVJlYWRlclwiXG5cbi8qKiAgVGhpcyBmdW5jdGlvbiByZWFkcyBhIGZpbGUgZnJvbSB0aGUgdXNlcidzIGZpbGUgc3lzdGVtIGFuZCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBzbGljZXMgb2YgdGhlIGZpbGUgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZVN0cmVhbShcbiAgZmlsZTogRmlsZSxcbiAgY2h1bmtTaXplOiBudW1iZXIgPSAxMDI0ICogMTAyNCwgLy8gMU1CLFxuICBlYWNoU3RyaW5nOiBzdHJlYW1DYWxsYmFjayA9IChzdHJpbmc6IHN0cmluZykgPT4gdW5kZWZpbmVkXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgZmlsZVNpemUgPSBmaWxlLnNpemVcbiAgbGV0IG9mZnNldCA9IDBcbiAgbGV0IHN0b3BwZWQgPSBmYWxzZVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzLCByZWopID0+IHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG5cbiAgICBjb25zdCBzdG9wID0gKCkgPT4ge1xuICAgICAgc3RvcHBlZCA9IHRydWVcbiAgICAgIHJlYWRlci5hYm9ydCgpXG4gICAgfVxuICAgIGNvbnN0IGNhbmNlbCA9IHN0b3BcbiAgXG4gICAgcmVhZGVyLm9ubG9hZCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldD8ucmVzdWx0KSB7ICAgICAgICBcbiAgICAgICAgZWFjaFN0cmluZyhcbiAgICAgICAgICBldmVudC50YXJnZXQucmVzdWx0IGFzIHN0cmluZywge1xuICAgICAgICAgICAgaXNMYXN0OiAob2Zmc2V0ICsgY2h1bmtTaXplKSA+PSBmaWxlU2l6ZSxcbiAgICAgICAgICAgIHBlcmNlbnQ6IG9mZnNldCAvIGZpbGVTaXplICogMTAwLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgc3RvcCxcbiAgICAgICAgICAgIGNhbmNlbFxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgLy8gaW5jcmVtZW50XG4gICAgICAgIG9mZnNldCArPSBjaHVua1NpemVcbiAgICAgIH1cblxuICAgICAgaWYgKCFzdG9wcGVkICYmIG9mZnNldCA8IGZpbGVTaXplKSB7XG4gICAgICAgIHJlYWRTbGljZSgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJlYWRlci5vbmVycm9yID0gcmVqXG5cbiAgICBmdW5jdGlvbiByZWFkU2xpY2UoKSB7XG4gICAgICBjb25zdCBzbGljZSA9IGZpbGUuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBjaHVua1NpemUpXG4gICAgICByZWFkZXIucmVhZEFzVGV4dChzbGljZSlcbiAgICB9XG5cbiAgICByZWFkU2xpY2UoKVxuICAgIC8vIHJldHVybiAoKSA9PiByZWFkZXIuYWJvcnQoKVxuICB9KVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkV3JpdGVGaWxlKFxuICBmaWxlOiBEbUZpbGVSZWFkZXIsXG4gIGZpbGVIYW5kbGU6IEZpbGVTeXN0ZW1GaWxlSGFuZGxlLFxuICB0cmFuc2Zvcm1GbjogKFxuICAgIGNodW5rOiBzdHJpbmcsXG4gICAgc3RhdHM6IFN0cmVhbVN0YXRzXG4gICkgPT4gc3RyaW5nLCAvLyBha2EgY2FsbGJhY2tcbiAgY2h1bmtTaXplID0gMTAyNCAqIDEwMjQsIC8vIDEgTUJcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB3cml0YWJsZVN0cmVhbSA9IGF3YWl0IGZpbGVIYW5kbGUuY3JlYXRlV3JpdGFibGUoKSAvLyBPcGVuIGEgd3JpdGFibGUgc3RyZWFtIGZvciB0aGUgZmlsZVxuICBjb25zdCBvblN0cmluZzogc3RyZWFtQ2FsbGJhY2sgPSBhc3luYyAoc3RyaW5nLCBzdGF0cykgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsU3RvcCA9IHN0YXRzLnN0b3BcbiAgICBzdGF0cy5zdG9wID0gKCkgPT4ge1xuICAgICAgb3JpZ2luYWxTdG9wKCkgLy8gY2FsbCB0aGUgc3RvcCB3ZSBhcmUgd3JhcHBpbmdcbiAgICAgIHdyaXRhYmxlU3RyZWFtLmNsb3NlKClcbiAgICB9XG4gICAgc3RhdHMuY2FuY2VsID0gKCkgPT4ge1xuICAgICAgb3JpZ2luYWxTdG9wKCkgLy8gY2FsbCB0aGUgc3RvcCB3ZSBhcmUgd3JhcHBpbmdcbiAgICAgIHdyaXRhYmxlU3RyZWFtLmFib3J0KClcbiAgICB9XG4gICAgICAgIFxuICAgIHJldHVybiB3cml0YWJsZVN0cmVhbS53cml0ZShcbiAgICAgIGF3YWl0IHRyYW5zZm9ybUZuKHN0cmluZywgc3RhdHMpXG4gICAgKVxuICB9XG4gIFxuICBhd2FpdCBmaWxlLnJlYWRUZXh0U3RyZWFtKG9uU3RyaW5nLCBjaHVua1NpemUpXG4gIGF3YWl0IHdyaXRhYmxlU3RyZWFtLmNsb3NlKClcbiAgd3JpdGFibGVTdHJlYW0udHJ1bmNhdGVcbn1cbiJdfQ==