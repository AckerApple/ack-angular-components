import { BaseDmFileReader, findDirectoryWithin, getNameByPath, renameFileInDir } from "./DirectoryManagers";
import { directoryReadToArray } from "./directoryReadToArray.function";
import { path } from "./path";
export class BrowserDmFileReader extends BaseDmFileReader {
    constructor(file, directory) {
        super();
        this.file = file;
        this.directory = directory;
        this.name = file.name;
    }
    async stats() {
        return this.getRealFile();
    }
    async write(fileString) {
        let writableStream;
        const likeFile = this.file;
        const hasPermission = likeFile.queryPermission && await likeFile.queryPermission() === 'granted';
        if (hasPermission) {
            writableStream = await likeFile.createWritable();
        }
        else {
            // request where to save
            const id = this.name.replace(/[^a-zA-Z0-9]/g, '-') + '-filePicker';
            const savePickerOptions = {
                suggestedName: this.name,
                /*types: [{
                  description: 'JSON',
                  accept: {
                    'application/json': ['.json'],
                  },
                }],*/
            };
            savePickerOptions.id = id.slice(0, 32);
            const handle = await window.showSaveFilePicker(savePickerOptions);
            writableStream = await handle.createWritable();
        }
        // write our file
        await writableStream.write(fileString);
        // close the file and write the contents to disk.
        await writableStream.close();
    }
    async getRealFile() {
        const file = this.file;
        return file.getFile ? await file.getFile() : Promise.resolve(file);
    }
    readAsText() {
        return new Promise(async (res, rej) => {
            try {
                var reader = new FileReader();
                const file = await this.getRealFile();
                reader.readAsText(file);
                reader.onload = () => res(reader.result);
            }
            catch (err) {
                rej(err);
            }
        });
    }
    readAsDataURL() {
        return new Promise(async (res, rej) => {
            try {
                var reader = new FileReader();
                const file = await this.getRealFile();
                reader.readAsDataURL(file);
                reader.onload = () => res(reader.result);
            }
            catch (err) {
                rej(err);
            }
        });
    }
}
export class BrowserDirectoryManager {
    constructor(path, files, // LikeFile[],
    directoryHandler) {
        this.path = path;
        this.files = files;
        this.directoryHandler = directoryHandler;
        this.name = getNameByPath(path);
    }
    findDirectory(path, options) {
        return findDirectoryWithin(path, this, options);
    }
    async list() {
        const files = await directoryReadToArray(this.directoryHandler);
        return files.map(file => file.name);
    }
    async listFolders() {
        const items = await directoryReadToArray(this.directoryHandler);
        return items.filter((file) => file.kind && file.kind === 'directory')
            .map(file => file.name);
    }
    async listFiles() {
        const items = await this.list();
        return items.filter((file) => file.kind === 'file')
            .map((file) => file.name);
    }
    async getFolders() {
        const names = await this.listFolders();
        return Promise.all(names.map(async (name) => await this.getDirectory(name)));
    }
    async getFiles() {
        const files = await directoryReadToArray(this.directoryHandler);
        return files.filter(file => file.kind === 'file')
            .map(file => new BrowserDmFileReader(file, this));
    }
    createDirectory(newPath) {
        return this.getDirectory(newPath, { create: true });
    }
    async getDirectory(newPath, options) {
        if (!newPath) {
            return this;
        }
        const newPathArray = newPath.split('/');
        let fullNewPath = this.path;
        let dir;
        try {
            // traverse through each folder
            dir = await newPathArray.reduce(async (last, current) => {
                const next = await last;
                const newHandle = next.getDirectoryHandle(current, options);
                const name = (await newHandle).name;
                fullNewPath = path.join(fullNewPath, name);
                return newHandle;
            }, Promise.resolve(this.directoryHandler));
        }
        catch (err) {
            throw new Error(err.message + `. ${newPath} not found in ${this.name} (${this.path})`);
        }
        const files = await directoryReadToArray(dir);
        const newDir = new BrowserDirectoryManager(fullNewPath, files, dir);
        return newDir;
    }
    async removeEntry(name, options) {
        const split = name.split('/');
        const lastName = split.pop(); // remove last item
        const dir = split.length >= 1 ? await this.getDirectory(split.join('/')) : this;
        return dir.directoryHandler.removeEntry(lastName, options);
    }
    async renameFile(oldFileName, newFileName) {
        return renameFileInDir(oldFileName, newFileName, this);
    }
    async file(path, options) {
        const findFile = await this.findFileByPath(path);
        if (findFile) {
            return findFile;
        }
        const dir = await this.getDirForFilePath(path);
        const fileName = path.split('/').pop();
        const fileHandle = await dir.directoryHandler.getFileHandle(fileName, options);
        return new BrowserDmFileReader(fileHandle, this);
    }
    async findFileByPath(path, directoryHandler = this.directoryHandler) {
        const pathSplit = path.split('/');
        const fileName = pathSplit.pop(); // pathSplit[ pathSplit.length-1 ]
        // chrome we dig through the first selected directory and search the subs
        if (pathSplit.length) {
            const dir = await this.getDirectory(pathSplit.join('/'));
            directoryHandler = dir.directoryHandler;
        }
        let files = this.files;
        files = await directoryReadToArray(directoryHandler);
        const likeFile = files.find(file => file.name === fileName);
        if (!likeFile) {
            return;
        }
        // when found, convert to File
        // const file = await this.getSystemFile(likeFile)
        return new BrowserDmFileReader(likeFile, this);
    }
    async getDirForFilePath(path) {
        const pathSplit = path.split('/');
        pathSplit.pop(); // pathSplit[ pathSplit.length-1 ]
        return await this.getDirectory(pathSplit.join('/'));
    }
}
//# sourceMappingURL=data:application/json;base64,