{"version":3,"file":"ack-angular-components.mjs","sources":["../../src/directory-managers/stringToXml.function.ts.ts","../../src/directory-managers/DirectoryManagers.ts","../../src/directory-managers/directoryReadToArray.function.ts","../../src/directory-managers/path.ts","../../src/directory-managers/BrowserDirectoryManagers.ts","../../src/directory-managers/convertSlashes.ts","../../src/directory-managers/NeutralinoDirectoryManager.ts","../../src/directory-managers/SafariDirectoryManagers.ts","../../src/components/robust-select-directory/robust-select-directory.component.ts","../../src/components/robust-select-directory/robust-select-directory.component.html","../../src/declarations.ts","../../src/AckComponentsModule.ts","../../src/ack-angular-components.ts"],"sourcesContent":["export function stringToXml(string: string) {\n  return new DOMParser().parseFromString(string.trim(), \"text/xml\")\n}\n","import { stringToXml } from \"./stringToXml.function.ts\"\n\nexport interface DirectoryManager {\n  name: string\n  path: string\n\n  createDirectory: (path: string) => Promise<DirectoryManager>\n  // should throw error if directory does not exist\n  getDirectory: (path: string, options?: FileSystemGetDirectoryOptions) => Promise<DirectoryManager>\n  // should return undefined if directory does not exist\n  findDirectory: (path: string, options?: FileSystemGetDirectoryOptions) => Promise<DirectoryManager | undefined>\n  \n  list: () => Promise<string[]>\n  listFiles: () => Promise<string[]>\n  listFolders: () => Promise<string[]>\n  \n  getFolders: () => Promise<DirectoryManager[]>\n  getFiles: () => Promise<DmFileReader[]>\n  findFileByPath: (path: string) => Promise<DmFileReader | undefined>\n  file: (fileName: string, options?: FileSystemGetFileOptions) => Promise<DmFileReader>\n  renameFile: (oldFileName: string, newfileName: string, options?: FileSystemGetFileOptions) => Promise<DmFileReader>\n\n  removeEntry: (name: string, options?: { recursive: boolean }) => Promise<void>\n}\n\nexport interface FileStats {\n  lastModified: number\n  lastModifiedDate?: Date\n  name: string\n  size: number // 788\n  type: string // \"application/json\"\n}\n\nexport interface DmFileReader {\n  directory: DirectoryManager\n  name: string\n  write: (fileString: string) => Promise<void>\n  readAsText: () => Promise<string>\n  readAsJson: () => Promise<Object>\n  readAsDataURL: () => Promise<string>\n  readAsXml: () => Promise<Document>\n  readXmlFirstElementByTagName: (tagName: string) => Promise<Element | undefined>\n  readXmlElementsByTagName: (tagName: string) => Promise<Element[]>\n  readXmlFirstElementContentByTagName: (tagName: string) => Promise<string | null | undefined>\n  stats: () => Promise<FileStats>\n}\n\nexport class BaseDmFileReader {\n  async readXmlFirstElementContentByTagName(tagName: string): Promise<string | null | undefined> {\n    const elements = await this.readXmlElementsByTagName(tagName)\n    return elements.find(tag => tag.textContent )?.textContent\n  }\n\n  async readXmlElementsByTagName(tagName: string): Promise<Element[]> {\n    const xml = await this.readAsXml()\n    return new Array(...xml.getElementsByTagName(tagName) as any)\n  }\n\n  async readXmlFirstElementByTagName(tagName: string): Promise<Element | undefined> {\n    const xml = await this.readAsXml()\n    const elements = new Array(...xml.getElementsByTagName(tagName) as any)\n    return elements.length ? elements[0] : undefined\n  }\n\n  async readAsXml(): Promise<Document> {\n    const string = await this.readAsText()\n    return stringToXml( string )\n  }\n  \n  async readAsJson(): Promise<string> {\n    return JSON.parse(await this.readAsText())\n  }\n  \n  readAsText(): Promise<string> {\n    throw new Error('no override provided for BaseDmFileReader.readAsText')\n  }\n}\n\nexport function getNameByPath(path: string) {\n  const half = path.split(/\\//).pop() as string\n  return half.split(/\\\\/).pop() as string\n}\n\nexport async function findDirectoryWithin(\n  path: string,\n  inDir: DirectoryManager,\n  options?: FileSystemGetDirectoryOptions,\n): Promise<DirectoryManager | undefined> {\n  const pathSplit = path.split('/').filter(x => x)\n  \n  if ( pathSplit.length >= 1 ) {\n    const firstParent = pathSplit.shift() as string // remove index 0 of firstParent/firstParent/file.xyz\n    \n    try {\n      const parent = await inDir.getDirectory(firstParent)\n      if ( !parent ) {\n        return // undefined\n      }\n      return await findDirectoryWithin(pathSplit.join('/'), parent, options)\n    } catch (err) {\n      const folderList = await inDir.listFolders()\n      if ( folderList.includes(firstParent) ) {\n        throw err // rethrow because its not about a missing folder\n      }\n\n      return // our folderList does not contain what we are looking for\n    }\n  }\n\n  return inDir // return last result\n}\n\nexport async function renameFileInDir(\n  oldFileName: string,\n  newFileName: string,\n  dir: DirectoryManager\n): Promise<DmFileReader> {\n  const oldFile = await dir.file(oldFileName)\n  const data = await oldFile.readAsText()\n  const newFile = await dir.file(newFileName, { create: true })\n  await newFile.write(data)\n  await dir.removeEntry(oldFileName)\n  return newFile\n}\n","export async function directoryReadToArray(\n  // directory: FileSystemFileHandle[] //LikeFile[]\n  directory: FileSystemDirectoryHandle //LikeFile[]\n): Promise<FileSystemFileHandle[]> {\n  const files: FileSystemFileHandle[] = [] // {name: string, kind: string, getFile: () => File}[] = []\n  for await (const entry of directory.values()) {\n    files.push(entry as any)\n  }\n  return files\n}","export const path = {\n  join: (...args: string[]) => {\n    return args.filter(value => value.length).join('/')\n  }\n}\n","import { BaseDmFileReader, DirectoryManager, DmFileReader, findDirectoryWithin, getNameByPath, renameFileInDir } from \"./DirectoryManagers\"\nimport { directoryReadToArray } from \"./directoryReadToArray.function\"\nimport { path } from \"./path\"\n\nexport class BrowserDmFileReader extends BaseDmFileReader implements DmFileReader {\n  name: string\n\n  constructor(\n    public file: File | FileSystemFileHandle,\n    public directory: DirectoryManager\n  ) {\n    super()\n    this.name = file.name\n  }\n\n  async stats() {\n    return this.getRealFile()\n  }\n\n  async write(fileString: string) {\n    let writableStream: any\n    const likeFile: any = this.file\n    const hasPermission = likeFile.queryPermission && await likeFile.queryPermission() === 'granted'\n\n    if ( hasPermission ) {\n      writableStream = await likeFile.createWritable()\n    } else {\n      // request where to save\n      const id = this.name.replace(/[^a-zA-Z0-9]/g,'-')+'-filePicker'\n      const savePickerOptions = {\n        suggestedName: this.name,\n        /*types: [{\n          description: 'JSON',\n          accept: {\n            'application/json': ['.json'],\n          },\n        }],*/\n      }\n\n      // below, thought to remember last matching file (i think data typing is just missing for it)\n      ;(savePickerOptions as any).id = id.slice(0, 32)\n\n      const handle = await window.showSaveFilePicker(savePickerOptions)\n      \n      writableStream = await handle.createWritable()\n    }\n\n\n    // write our file\n    await writableStream.write( fileString )\n\n    // close the file and write the contents to disk.\n    await writableStream.close()\n  }\n\n  private async getRealFile(): Promise<File> {\n    const file = this.file as any\n    return file.getFile ? await file.getFile() : Promise.resolve(file)\n  }\n  \n  override readAsText(): Promise<string> {\n    return new Promise(async (res, rej) => {\n      try {\n        var reader = new FileReader()\n        const file = await this.getRealFile()\n        reader.readAsText(file)\n        reader.onload = () => res(reader.result as string)\n      } catch (err) {\n        rej(err)\n      }\n    })\n  }\n\n  readAsDataURL(): Promise<string> {\n    return new Promise(async (res, rej) => {\n      try {\n        var reader = new FileReader()\n        const file = await this.getRealFile()\n        reader.readAsDataURL(file)\n        reader.onload = () => res(reader.result as string)\n      } catch (err) {\n        rej(err)\n      }\n    })\n  }\n}\n\nexport class BrowserDirectoryManager implements DirectoryManager {\n  name: string\n\n  constructor(\n    public path: string,\n    public files: FileSystemFileHandle[], // LikeFile[],\n    public directoryHandler: FileSystemDirectoryHandle,\n  ) {\n    this.name = getNameByPath(path)\n  }\n\n  findDirectory (\n    path: string,\n    options?: FileSystemGetDirectoryOptions,\n  ): Promise<DirectoryManager | undefined> {\n    return findDirectoryWithin(path, this, options)\n  }\n  \n  async list(): Promise<string[]> {\n    const files = await directoryReadToArray(this.directoryHandler)\n    return files.map(file => file.name)\n  }\n  \n  async listFolders(): Promise<string[]> {\n    const items = await directoryReadToArray(this.directoryHandler)\n    return items.filter((file: any) => file.kind && (file as any).kind === 'directory')\n      .map(file => file.name)\n  }\n  \n  async listFiles(): Promise<string[]> {\n    const items = await directoryReadToArray(this.directoryHandler)\n    return items.filter((file: any) => file.kind === 'file')\n      .map((file: any) => file.name)\n  }\n  \n  async getFolders(): Promise<BrowserDirectoryManager[]> {\n    const names = await this.listFolders()\n    return Promise.all(\n      names.map(async name => await this.getDirectory(name))\n    )\n  }\n  \n  async getFiles(): Promise<DmFileReader[]> {\n    const files = await directoryReadToArray(this.directoryHandler)\n    return files.filter(file => file.kind === 'file')\n      .map(file => new BrowserDmFileReader(file, this))\n  }\n\n  createDirectory(newPath: string) {\n    return this.getDirectory(newPath, { create: true })\n  }\n\n  async getDirectory(\n    newPath: string,\n    options?: FileSystemGetDirectoryOptions\n  ): Promise<BrowserDirectoryManager> {\n    if ( !newPath ) {\n      return this\n    }\n\n    const newPathArray = newPath.split(/\\\\|\\//)\n    let fullNewPath = this.path\n    let dir: FileSystemDirectoryHandle\n\n    try {\n      // traverse through each folder\n      dir  = await newPathArray.reduce(async (last,current) => {\n        const next: FileSystemDirectoryHandle = await last\n        const newHandle = next.getDirectoryHandle(current, options)\n        const name = (await newHandle).name\n        fullNewPath = path.join(fullNewPath, name)\n        return newHandle\n      }, Promise.resolve(this.directoryHandler))\n    } catch (err: any) {\n      throw new Error(err.message + `. ${newPath} not found in ${this.name} (${this.path})`)\n    }\n\n    const files: FileSystemFileHandle[] = await directoryReadToArray(dir)\n    const newDir = new BrowserDirectoryManager(\n      fullNewPath,\n      files,\n      dir\n    )\n    return newDir\n  }\n\n  async removeEntry(\n    name: string,\n    options?: { recursive: boolean }\n  ): Promise<void> {\n    const split = name.split(/\\\\|\\//)\n    const lastName = split.pop() as string // remove last item\n    const dir = split.length >= 1 ? await this.getDirectory( split.join('/') ) : this\n    return dir.directoryHandler.removeEntry(lastName, options)\n  }\n\n  async renameFile(\n    oldFileName: string,\n    newFileName: string\n  ) {\n    return renameFileInDir(oldFileName, newFileName, this)\n  }\n\n  async file(path: string, options?: FileSystemGetFileOptions) {\n    const findFile = await this.findFileByPath(path)\n    if ( findFile ) {\n      return findFile\n    }\n\n    const dir = await this.getDirForFilePath(path) as BrowserDirectoryManager\n    const fileName = path.split(/\\\\|\\//).pop() as string\n\n    const fileHandle = await dir.directoryHandler.getFileHandle(fileName, options)\n    return new BrowserDmFileReader(fileHandle, this)\n  }\n\n  async findFileByPath(\n    path: string,\n    directoryHandler: any = this.directoryHandler,\n  ): Promise<BrowserDmFileReader | undefined> {\n    const pathSplit = path.split(/\\\\|\\//)\n    const fileName = pathSplit.pop() // pathSplit[ pathSplit.length-1 ]\n\n    // chrome we dig through the first selected directory and search the subs\n    if ( pathSplit.length ) {\n      const dir = await this.getDirectory( pathSplit.join('/') )\n      directoryHandler = dir.directoryHandler\n    }\n    \n    let files = this.files\n    files = await directoryReadToArray(directoryHandler)\n    const likeFile = files.find(file => file.name === fileName)\n    if ( !likeFile ) {\n      return\n    }\n    \n    // when found, convert to File\n    // const file = await this.getSystemFile(likeFile)\n    return new BrowserDmFileReader(likeFile, this)\n  }\n  \n  async getDirForFilePath(path: string) {\n    const pathSplit = path.split(/\\\\|\\//)\n    pathSplit.pop() as string // pathSplit[ pathSplit.length-1 ]\n  \n    return await this.getDirectory( pathSplit.join('/') )\n  }\n}\n\n","export function convertSlashes(string: string) {\n  return string.replace('\\\\','/')\n}\n","import { convertSlashes } from \"./convertSlashes\"\nimport { BaseDmFileReader, DirectoryManager, DmFileReader, findDirectoryWithin, getNameByPath, renameFileInDir } from \"./DirectoryManagers\"\nimport { path } from \"./path\"\n\ninterface INeutralino {\n  filesystem: INeutralinoFs\n}\ninterface INeutralinoFs {\n  getStats: (path: string) => any\n  readFile: (path: string) => any\n  readBinaryFile: (path: string) => any\n  writeFile: (path: string, data: string) => any\n  removeFile: (path: string) => any\n  removeDirectory: (path: string) => any\n  \n  createDirectory: (path: string) => Promise<{entry: 'FILE' | 'DIRECTORY', type: string}[]>\n  readDirectory: (path: string) => Promise<{entry: 'FILE' | 'DIRECTORY', type: string}[]>\n}\n\ndeclare const Neutralino: INeutralino\nconst fs = typeof Neutralino === 'object' ? Neutralino.filesystem : {} as INeutralinoFs\n\nexport class NeutralinoDmFileReader extends BaseDmFileReader implements DmFileReader {\n  name: string\n  \n  constructor(\n    public filePath: string,\n    public directory: NeutralinoDirectoryManager,\n  ) {\n    super()\n    this.name = filePath.split(/\\\\|\\//).pop() as string\n  }\n\n  async stats() {\n    const stats = await fs.getStats(this.filePath)\n    stats.name = stats.name || this.name\n    return stats\n  }\n\n  override readAsText(): Promise<string> {\n    return fs.readFile(this.filePath) // .toString()\n  }\n  \n  async readAsDataURL(): Promise<string> {\n    let data = await fs.readBinaryFile(this.filePath)\n    const view = new Uint8Array(data);\n    var decoder = new TextDecoder('utf8');\n    var b64encoded = btoa(decoder.decode(view))\n    return b64encoded\n  }\n\n  async write(fileString: string) {\n    return fs.writeFile(this.filePath, fileString)\n  }\n}\n\nexport class NeutralinoDirectoryManager implements DirectoryManager {\n  name: string\n\n  constructor(\n    public path: string,\n  ) {\n    this.name = getNameByPath(path)\n  }\n\n  findDirectory (\n    path: string,\n    options?: FileSystemGetDirectoryOptions,\n  ): Promise<DirectoryManager | undefined> {\n    return findDirectoryWithin(path, this, options)\n  }\n\n  async list(): Promise<string[]> {\n    const reads = await Neutralino.filesystem.readDirectory( this.path )\n    return reads.filter(read => !['.','..'].includes(read.entry)).map(read => read.entry)\n  }\n\n  async listFolders(): Promise<string[]> {\n    const reads = await Neutralino.filesystem.readDirectory( this.path )\n    return reads.filter(read => !['.','..'].includes(read.entry) && read.type === 'DIRECTORY')\n      .map(read => read.entry)\n  }\n\n  async listFiles(): Promise<string[]> {\n    const reads = await Neutralino.filesystem.readDirectory( this.path )\n    return reads.filter(read => !['.','..'].includes(read.entry) && read.type !== 'DIRECTORY')\n      .map(read => read.entry)\n  }\n\n  async getFolders(): Promise<NeutralinoDirectoryManager[]> {\n    return Promise.all(\n      (await this.listFolders()).map(async name => await this.getDirectory(name))\n    )\n  }\n\n  async getFiles(): Promise<DmFileReader[]> {\n    const reads = await Neutralino.filesystem.readDirectory( this.path )\n    return reads.filter(read => !['.','..'].includes(read.entry) && read.type !== 'DIRECTORY')\n      .map(read => new NeutralinoDmFileReader(this.getFullPath(read.entry), this))\n  }\n\n  async createDirectory(newPath: string): Promise<DirectoryManager> {\n    const pathTo = path.join(this.path, newPath)\n    await Neutralino.filesystem.createDirectory(pathTo)\n    return this.getDirectory(newPath)\n  }\n\n  async getDirectory(newPath: string) {\n    if ( !newPath ) {\n      return this\n    }\n    \n    const pathTo = path.join(this.path, newPath)\n    \n    // ensure path exists\n    await Neutralino.filesystem.readDirectory(pathTo)\n    \n    return new NeutralinoDirectoryManager( pathTo )\n  }\n\n  async findFileByPath (\n    filePath: string,\n  ): Promise<NeutralinoDmFileReader> {\n    const fullFilePath = this.getFullPath(filePath)\n    return new NeutralinoDmFileReader(fullFilePath, this)\n  }\n\n  file(fileName: string, _options?: FileSystemGetFileOptions) {\n    return this.findFileByPath(fileName)\n  }\n\n  getFullPath(itemPath: string) {\n    let fullFilePath = path.join(this.path, itemPath)\n    return convertSlashes(fullFilePath)\n  }\n\n  async renameFile(\n    oldFileName: string,\n    newFileName: string\n  ) {\n    return renameFileInDir(oldFileName, newFileName, this)\n  }\n\n  async removeEntry(\n    name: string,\n    // options?: { recursive: boolean }\n  ): Promise<void> {\n    const split = name.split(/\\\\|\\//)\n    const lastName = split.pop() as string // remove last item\n    const dir = split.length >= 1 ? await this.getDirectory( split.join('/') ) : this\n\n    const pathTo = path.join(dir.path, name)\n    \n    const fileNames = await dir.listFiles()\n    if ( fileNames.includes(lastName) ) {\n      return Neutralino.filesystem.removeFile(pathTo)\n    }\n    \n    await Neutralino.filesystem.removeDirectory(pathTo)\n    return\n  }\n}\n","import { DirectoryManager, DmFileReader, findDirectoryWithin, getNameByPath, renameFileInDir } from \"./DirectoryManagers\"\nimport { BrowserDmFileReader } from \"./BrowserDirectoryManagers\"\nimport { path } from \"./path\"\n\nexport class SafariDirectoryManager implements DirectoryManager {\n  name: string\n\n  constructor(\n    public path: string = '',\n    public files: File[],\n  ) {\n    this.name = getNameByPath(path)\n  }\n\n  async renameFile(\n    oldFileName: string,\n    newFileName: string\n  ) {\n    return renameFileInDir(oldFileName, newFileName, this)\n  }\n\n  /** ⚠️ does not actually work */\n  removeEntry(\n    _name: string,\n    _options?: { recursive: boolean }\n  ): Promise<void> {\n    throw 'removeEntry does not work in Safari'\n  }\n\n  findDirectory (\n    path: string,\n    options?: FileSystemGetDirectoryOptions,\n  ): Promise<DirectoryManager | undefined> {\n    return findDirectoryWithin(path, this, options)\n  }\n\n  /** ⚠️ does not actually work */\n  createDirectory(newPath: string) {\n    return this.getDirectory(newPath)\n  }\n\n  async getDirectory(path: string) {\n    // safari gives you all items up front\n    const nextItems = this.files.filter(file => {\n      const relative = getWebkitPathRelativeTo(file, this.path)\n      return relative.substring(0, path.length).toLowerCase() === path.toLowerCase()\n    })\n    return new SafariDirectoryManager(path, nextItems)\n  }\n\n  getRelativeItems() {\n    return this.files.filter(file => {\n      const relative = getWebkitPathRelativeTo(file, this.path)\n      return relative.split('/').length === 1 // lives within same directory\n    })\n  }\n\n  async list(): Promise<string[]> {\n    return this.getRelativeItems().map(file => file.name)\n  }\n\n  async listFolders(): Promise<string[]> {\n    return this.getRelativeItems()\n      .filter(file => file.name.split('.').length === 1)\n      .map(file => file.name)\n  }\n\n  async listFiles(): Promise<string[]> {\n    return this.getRelativeItems().map(file => file.name)\n  }\n  \n  async getFolders(): Promise<SafariDirectoryManager[]> {\n    return Promise.all(\n      (await this.listFolders()).map(async name => await this.getDirectory(name))\n    )\n  }\n\n  async getFiles(): Promise<DmFileReader[]> {\n    return this.getRelativeItems().map(file => new BrowserDmFileReader(file, this))\n  }\n\n  async findFileByPath (filePath: string ): Promise<BrowserDmFileReader | undefined> {\n    if ( !this.files.length ) {\n      return\n    }\n\n    // safari include the parent folder name so we need to prepend it to the file search\n    const rootName = this.files[0].webkitRelativePath.split('/').shift() as string\n    filePath = path.join(rootName, this.path, filePath)\n    \n    // safari just gives us every files upfront, find within that (huge) array\n    const file = this.files.find(file => file.webkitRelativePath === filePath) as File | undefined\n    return file ? new BrowserDmFileReader(file, this) : undefined\n  }\n\n  async file(fileName: string, _options?: FileSystemGetFileOptions) {\n    const findFile = await this.findFileByPath(fileName)\n\n    if ( findFile ) {\n      return findFile\n    }\n\n    const superFile = new BrowserDmFileReader(new File([], fileName), this)\n    return Promise.resolve(superFile)\n  }\n}\n\nfunction getWebkitPathRelativeTo(file: File, path: string) {\n  const relativeSplit = file.webkitRelativePath.split('/')\n  relativeSplit.shift() // remove the first notation on safari results\n  if ( path !== '' ) {\n    let splitCount = path.split('/').length\n    while (splitCount) {\n      relativeSplit.shift() // remove starting notations on safari results\n      --splitCount\n    }\n  }\n  return relativeSplit.join('/')\n}","import { Component, EventEmitter, Input, Output } from '@angular/core'\nimport { BrowserDirectoryManager } from '../../directory-managers/BrowserDirectoryManagers'\nimport { DirectoryManager } from '../../directory-managers/DirectoryManagers'\nimport { directoryReadToArray } from '../../directory-managers/directoryReadToArray.function'\nimport { NeutralinoDirectoryManager } from '../../directory-managers/NeutralinoDirectoryManager'\nimport { SafariDirectoryManager } from '../../directory-managers/SafariDirectoryManagers'\n\ndeclare const Neutralino: any\n\n@Component({\n  selector: 'robust-select-directory',\n  templateUrl: './robust-select-directory.component.html',\n})\nexport class RobustSelectDirectoryComponent {\n  @Input() label!: string // \"LaunchBox\"\n  @Input() pickerId?: string // ensures loaded path is same as previous\n  @Input() reloadPath?: string // C:\\blah\\blah\n  @Output() error = new EventEmitter<Error>()\n  @Input() directoryManager?: DirectoryManager\n  @Output() directoryManagerChange = new EventEmitter<DirectoryManager>()\n\n  getPickerId() {\n    return this.pickerId || this.getId().replace(/[ -_]/g,'')\n  }\n  \n  async onPathReload(path: string) {\n    if ( typeof Neutralino === 'object' ) {\n      const dm = new NeutralinoDirectoryManager(path)\n      this.directoryManagerChange.emit(this.directoryManager = dm)\n    }\n  }\n\n  async selectPath() {\n    const isNeu = typeof Neutralino === 'object'\n    if ( isNeu ) {\n      let response = await Neutralino.os.showFolderDialog()\n      if ( response ) {\n        this.reloadPath = response\n        const dm = new NeutralinoDirectoryManager(response)\n        this.directoryManagerChange.emit(this.directoryManager = dm)\n      }\n      return\n    }\n\n    const canPickDir = window.showDirectoryPicker as any\n\n    // chrome\n    if ( canPickDir ) {  \n      try {\n        const boxDir = await window.showDirectoryPicker({\n          id: this.getPickerId(),\n          // id: this.getId(),\n          mode: 'readwrite'\n        })\n        const boxFiles = await directoryReadToArray( boxDir )\n        const dm = new BrowserDirectoryManager('', boxFiles, boxDir)\n        this.directoryManagerChange.emit(this.directoryManager = dm)\n        return\n      } catch (err: any) {\n        if ( err.message.includes('aborted') ) {\n          return\n        }\n        this.error.emit(err)\n      }\n    }\n\n    // safari\n    this.showDirectoryPicker()\n  }\n\n  getId() {\n    return 'robustFolderPicker-' + this.label\n  }\n\n  showDirectoryPicker() {\n    document.getElementById(this.getId())?.click()\n  }\n\n  // safari read directory\n  async readInputDirectory(input: any) {\n    if ( !input.files ) {\n      this.error.emit(new Error('no directory with files selected'))\n      return // no files selected\n    }\n\n    const files = Object.entries(input.files).filter(([key]) => key != 'length').map(([_key, value]) => value) as File[]\n    const dm = new SafariDirectoryManager('', files)\n    this.directoryManagerChange.emit(this.directoryManager = dm)\n  }\n}\n","<!-- search hints: reselect -->\n\n<input class=\"invisible pos-abs\" type=\"file\" directory accept=\".folder\" webkitdirectory\n  [id]=\"'robustFolderPicker-' + label\"\n  [name]=\"'robustFolderPicker-' + label\"\n  (change)=\"readInputDirectory($event.target)\"\n/>\n\n<button *ngIf=\"reloadPath\" type=\"button\" class=\"flex1\"\n  [title] = \"reloadPath\"\n  (click) = \"onPathReload(reloadPath)\"\n>🔄 Reload</button>\n\n<button type=\"button\" class=\"flex1\"\n  (click)=\"selectPath()\"\n  [class.opacity-80] = \"directoryManager\"\n>📁 {{ directoryManager ? 're' : '' }}select {{ label }} folder</button>\n\n<div *ngIf=\"reloadPath\" class=\"text-xs\">\n  <strong>{{ label }} path:</strong> {{ reloadPath }}\n</div>\n","import { RobustSelectDirectoryComponent } from \"./components/robust-select-directory/robust-select-directory.component\";\nexport { RobustSelectDirectoryComponent } from \"./components/robust-select-directory/robust-select-directory.component\";\n\nexport const declarations = [\n  RobustSelectDirectoryComponent,\n]\n","import {\n  ModuleWithProviders,\n  NgModule\n} from \"@angular/core\"\n\nimport { CommonModule } from \"@angular/common\"\nexport { CommonModule } from \"@angular/common\"\n\nimport { declarations as components } from \"./declarations\"\n\nconst declarations = [...components]\n\n@NgModule({\n  imports:[\n    CommonModule\n  ],\n  declarations,\n  exports: declarations\n}) export class AckComponentsModule {\n  static forRoot(): ModuleWithProviders<AckComponentsModule> {\n    return {\n      ngModule: AckComponentsModule,\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["declarations","components","i1.RobustSelectDirectoryComponent"],"mappings":"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"}