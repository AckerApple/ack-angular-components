{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { convertSlashes } from \"./convertSlashes\";\nimport { BaseDmFileReader } from \"./DirectoryManagers\";\nimport { path } from \"./path\";\nconst fs = typeof Neutralino === 'object' ? Neutralino.filesystem : {};\nexport class NeutralinoDmFileReader extends BaseDmFileReader {\n  constructor(filePath, directory) {\n    super();\n    this.filePath = filePath;\n    this.directory = directory;\n    this.name = filePath.split('/').pop();\n  }\n\n  readAsText() {\n    return fs.readFile(this.filePath);\n  }\n\n  write(fileString) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return fs.writeFile(this.filePath, fileString);\n    });\n  }\n\n}\nexport class NeutralinoDirectoryManager {\n  constructor(path) {\n    this.path = path;\n  }\n\n  list() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reads = yield Neutralino.filesystem.readDirectory(this.path);\n      return reads.filter(read => !['.', '..'].includes(read.entry)).map(read => read.entry);\n    });\n  }\n\n  listFiles() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reads = yield Neutralino.filesystem.readDirectory(this.path);\n      return reads.filter(read => !['.', '..'].includes(read.entry) && read.type !== 'DIRECTORY').map(read => new NeutralinoDmFileReader(this.getFullPath(read.entry), this));\n    });\n  }\n\n  getDirectory(newPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new NeutralinoDirectoryManager(path.join(this.path, newPath));\n    });\n  }\n\n  findFileByPath(filePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const fullFilePath = this.getFullPath(filePath);\n      return new NeutralinoDmFileReader(fullFilePath, this);\n    });\n  }\n\n  file(fileName, _options) {\n    return this.findFileByPath(fileName);\n  }\n\n  getFullPath(itemPath) {\n    let fullFilePath = path.join(this.path, itemPath);\n    return convertSlashes(fullFilePath);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}