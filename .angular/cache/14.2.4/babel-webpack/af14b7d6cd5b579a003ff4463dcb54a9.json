{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BrowserDmFileReader } from \"./BrowserDirectoryManagers\";\nimport { path } from \"./path\";\nexport class SafariDirectoryManager {\n  constructor(path = '', files) {\n    this.path = path;\n    this.files = files;\n  }\n\n  getDirectory(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const nextItems = this.files.filter(file => {\n        const relative = getWebkitPathRelativeTo(file, this.path);\n        return relative.substring(0, path.length).toLowerCase() === path.toLowerCase();\n      });\n      return new SafariDirectoryManager(path, nextItems);\n    });\n  }\n\n  getRelativeItems() {\n    return this.files.filter(file => {\n      const relative = getWebkitPathRelativeTo(file, this.path);\n      return relative.split('/').length === 1;\n    });\n  }\n\n  list() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.getRelativeItems().map(file => file.name);\n    });\n  }\n\n  listFiles() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.getRelativeItems().map(file => new BrowserDmFileReader(file, this));\n    });\n  }\n\n  findFileByPath(filePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.files.length) {\n        return;\n      }\n\n      const rootName = this.files[0].webkitRelativePath.split('/').shift();\n      filePath = path.join(rootName, this.path, filePath);\n      const file = this.files.find(file => file.webkitRelativePath === filePath);\n      return file ? new BrowserDmFileReader(file, this) : undefined;\n    });\n  }\n\n  file(fileName, _options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const findFile = yield this.findFileByPath(fileName);\n\n      if (findFile) {\n        return findFile;\n      }\n\n      const superFile = new BrowserDmFileReader(new File([], fileName), this);\n      return Promise.resolve(superFile);\n    });\n  }\n\n}\n\nfunction getWebkitPathRelativeTo(file, path) {\n  const relativeSplit = file.webkitRelativePath.split('/');\n  relativeSplit.shift();\n\n  if (path !== '') {\n    let splitCount = path.split('/').length;\n\n    while (splitCount) {\n      relativeSplit.shift();\n      --splitCount;\n    }\n  }\n\n  return relativeSplit.join('/');\n}","map":null,"metadata":{},"sourceType":"module"}