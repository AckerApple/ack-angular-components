{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { BrowserDirectoryManager } from '../../directory-managers/BrowserDirectoryManagers';\nimport { directoryReadToArray } from '../../directory-managers/directoryReadToArray.function';\nimport { NeutralinoDirectoryManager } from '../../directory-managers/NeutralinoDirectoryManager';\nimport { SafariDirectoryManager } from '../../directory-managers/SafariDirectoryManagers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction RobustSelectDirectoryComponent_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function RobustSelectDirectoryComponent_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onPathReload(ctx_r2.reloadPath));\n    });\n    i0.ɵɵtext(1, \"\\uD83D\\uDD04 Reload\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"title\", ctx_r0.reloadPath);\n  }\n}\n\nfunction RobustSelectDirectoryComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.label, \" path:\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.reloadPath, \"\\n\");\n  }\n}\n\nexport let RobustSelectDirectoryComponent = /*#__PURE__*/(() => {\n  class RobustSelectDirectoryComponent {\n    constructor() {\n      this.error = new EventEmitter();\n      this.directoryManagerChange = new EventEmitter();\n    }\n\n    getPickerId() {\n      return this.pickerId || this.getId().replace(/[ -_]/g, '');\n    }\n\n    onPathReload(path) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (typeof Neutralino === 'object') {\n          const dm = new NeutralinoDirectoryManager(path);\n          this.directoryManagerChange.emit(this.directoryManager = dm);\n        }\n      });\n    }\n\n    selectPath() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const isNeu = typeof Neutralino === 'object';\n\n        if (isNeu) {\n          let response = yield Neutralino.os.showFolderDialog();\n\n          if (response) {\n            this.reloadPath = response;\n            const dm = new NeutralinoDirectoryManager(response);\n            this.directoryManagerChange.emit(this.directoryManager = dm);\n          }\n\n          return;\n        }\n\n        const canPickDir = window.showDirectoryPicker;\n\n        if (canPickDir) {\n          try {\n            const boxDir = yield window.showDirectoryPicker({\n              id: this.getPickerId(),\n              mode: 'readwrite'\n            });\n            const boxFiles = yield directoryReadToArray(boxDir);\n            const dm = new BrowserDirectoryManager('', boxFiles, boxDir);\n            this.directoryManagerChange.emit(this.directoryManager = dm);\n            return;\n          } catch (err) {\n            if (err.message.includes('aborted')) {\n              return;\n            }\n\n            this.error.emit(err);\n          }\n        }\n\n        this.showDirectoryPicker();\n      });\n    }\n\n    getId() {\n      return 'robustFolderPicker-' + this.label;\n    }\n\n    showDirectoryPicker() {\n      var _a;\n\n      (_a = document.getElementById(this.getId())) === null || _a === void 0 ? void 0 : _a.click();\n    }\n\n    readInputDirectory(input) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!input.files) {\n          this.error.emit(new Error('no directory with files selected'));\n          return;\n        }\n\n        const files = Object.entries(input.files).filter(([key]) => key != 'length').map(([_key, value]) => value);\n        const dm = new SafariDirectoryManager('', files);\n        this.directoryManagerChange.emit(this.directoryManager = dm);\n      });\n    }\n\n  }\n\n  RobustSelectDirectoryComponent.ɵfac = function RobustSelectDirectoryComponent_Factory(t) {\n    return new (t || RobustSelectDirectoryComponent)();\n  };\n\n  RobustSelectDirectoryComponent.ɵcmp = i0.ɵɵdefineComponent({\n    type: RobustSelectDirectoryComponent,\n    selectors: [[\"robust-select-directory\"]],\n    inputs: {\n      label: \"label\",\n      pickerId: \"pickerId\",\n      reloadPath: \"reloadPath\",\n      directoryManager: \"directoryManager\"\n    },\n    outputs: {\n      error: \"error\",\n      directoryManagerChange: \"directoryManagerChange\"\n    },\n    decls: 5,\n    vars: 8,\n    consts: [[\"type\", \"file\", \"directory\", \"\", \"accept\", \".folder\", \"webkitdirectory\", \"\", 1, \"invisible\", \"pos-abs\", 3, \"id\", \"name\", \"change\"], [\"type\", \"button\", \"class\", \"flex1\", 3, \"title\", \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"flex1\", 3, \"click\"], [\"class\", \"text-xs\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"flex1\", 3, \"title\", \"click\"], [1, \"text-xs\"]],\n    template: function RobustSelectDirectoryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"input\", 0);\n        i0.ɵɵlistener(\"change\", function RobustSelectDirectoryComponent_Template_input_change_0_listener($event) {\n          return ctx.readInputDirectory($event.target);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(1, RobustSelectDirectoryComponent_button_1_Template, 2, 1, \"button\", 1);\n        i0.ɵɵelementStart(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function RobustSelectDirectoryComponent_Template_button_click_2_listener() {\n          return ctx.selectPath();\n        });\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, RobustSelectDirectoryComponent_div_4_Template, 4, 2, \"div\", 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"id\", \"robustFolderPicker-\" + ctx.label)(\"name\", \"robustFolderPicker-\" + ctx.label);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.reloadPath);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"opacity-80\", ctx.directoryManager);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate2(\"\\uD83D\\uDCC1 \", ctx.directoryManager ? \"re\" : \"\", \"select \", ctx.label, \" folder\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.reloadPath);\n      }\n    },\n    dependencies: [i1.NgIf],\n    encapsulation: 2\n  });\n  return RobustSelectDirectoryComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}