{"ast":null,"code":"var _a, _b, _c;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { PageScrollService } from \"ngx-page-scroll-core\";\nimport { Log, ErrorLog, Prompts } from \"../../src\";\nimport { AckApi, AckOffline, AckCache, AckQue } from \"../../modules/offline\";\nimport { animations } from \"ack-angular-fx\";\nconst pathing = window.location.pathname.split(\"/\").slice(0, -1).join(\"/\");\nconst defaultUrl = window.location.origin + pathing + \"/test.json\";\nlet ProviderExamples = class ProviderExamples {\n  constructor(Log, ErrorLog, PageScrollService, AckOffline, AckCache, AckQue, AckApi, Prompts) {\n    this.Log = Log;\n    this.ErrorLog = ErrorLog;\n    this.PageScrollService = PageScrollService;\n    this.AckOffline = AckOffline;\n    this.AckCache = AckCache;\n    this.AckQue = AckQue;\n    this.AckApi = AckApi;\n    this.Prompts = Prompts;\n    this.views = {};\n    this.queArray = [];\n    this.processQueResults = [];\n    this.httpQueArray = [];\n    this.httpCache = {};\n    this.cacheSeconds = 20;\n    this.httpHeaderConfigArray = [];\n    this.httpConfig = {\n      offlineModel: {\n        name: \"ackHttpTests\",\n        maxAge: 15000\n      },\n      promise: \"response\",\n      method: \"GET\",\n      url: defaultUrl,\n      headers: {\n        \"Content-Type\": \"text/plain\"\n      }\n    };\n    this.ErrorLog.monitorWindow();\n    this.AckQue.registerHandler(\"ackNgQueTest\", item => this.processQueItem(item));\n  }\n\n  ngOnInit() {\n    window.addEventListener(\"online\", () => {\n      if (navigator.onLine) {\n        this.backOnlineAt = getServerTime();\n        this.processQue();\n        this.processHttpQue();\n      }\n    });\n    this.loadHttpHeaderConfigArray();\n    this.reloadData();\n  }\n\n  clearHttpQue() {\n    return this.AckApi.clearQue(\"ackHttpTests\").then(() => this.readHttpQueArray(false));\n  }\n\n  clearHttpCache() {\n    return this.AckApi.clearCache(\"ackHttpTests\").then(() => this.readHttpCache());\n  }\n\n  sendHttp() {\n    delete this.httpError;\n    delete this.httpResponse;\n    this.viewHttpSub = false;\n    let promise = Promise.resolve();\n\n    if (!navigator.onLine && this.httpConfig.method != \"GET\") {\n      this.httpError = new Error(\"Offline mode detected. Request qued\");\n      promise = this.AckApi.AckQue.set(\"ackHttpTests\", this.httpConfig);\n    } else {\n      promise = this.AckApi.request(this.httpConfig).then(res => {\n        this.httpResponse = res;\n        delete this.httpError;\n      }).catch(e => {\n        this.httpError = e;\n        delete this.httpResponse;\n      });\n    }\n\n    return promise.then(() => this.readHttpQueArray(false)).then(() => this.readHttpCache());\n  }\n\n  readHttpHeaderConfigArray() {\n    for (let x = 0; x < this.httpHeaderConfigArray.length; ++x) {\n      let headDef = this.httpHeaderConfigArray[x];\n      this.httpConfig.headers[headDef.name] = headDef.value;\n    }\n  }\n\n  readHttpQueArray(process) {\n    return this.AckApi.getQue(\"ackHttpTests\").then(que => {\n      this.httpQueArray = que;\n      const doProcess = process || process == null && que.length && navigator.onLine;\n\n      if (doProcess) {\n        return this.processHttpQue();\n      }\n    });\n  }\n\n  readHttpCache() {\n    return this.AckApi.getCache(\"ackHttpTests\").then(cache => this.httpCache = cache);\n  }\n\n  processHttpQue() {\n    return this.AckApi.processQue(\"ackHttpTests\").then(() => this.readHttpQueArray(false));\n  }\n\n  loadHttpHeaderConfigArray() {\n    const rtn = [];\n\n    for (let name in this.httpConfig.headers) {\n      if (!name.length) continue;\n      rtn.push({\n        name,\n        value: this.httpConfig.headers[name]\n      });\n    }\n\n    this.httpHeaderConfigArray.length = 0;\n    this.httpHeaderConfigArray.push.apply(this.httpHeaderConfigArray, rtn);\n  }\n\n  causeErrorLog() {\n    this.ErrorLog.add(\"Error \" + this.ErrorLog.log.length + \" of \" + this.ErrorLog.maxLog + \" fired @ \" + getServerTime());\n  }\n\n  causeLog() {\n    this.Log.add(\"Log \" + this.Log.log.length + \" of \" + this.Log.maxLog + \" fired @ \" + getServerTime());\n  }\n\n  scrollToModuleImport() {\n    setTimeout(() => {\n      this.PageScrollService.scroll({\n        document: document,\n        scrollTarget: \"#Import AckModule\"\n      });\n    }, 600);\n  }\n\n  reloadData() {\n    return Promise.all([this.readOffline(), this.readQue(), this.readCache(), this.readHttpQueArray(), this.readHttpCache()]);\n  }\n\n  readOffline() {\n    this.AckOffline.get(\"ack-angular\").then(data => this.offlineStorage = data);\n  }\n\n  readQue() {\n    return this.AckQue.getQue(\"ackNgQueTest\").then(que => this.queArray = que);\n  }\n\n  readCache() {\n    return this.AckCache.get(\"ackNgCacheTest\").then(cache => this.cacheStorage = cache).then(() => this.readCacheObject()).catch(e => {\n      if (e.code && e.code == 401) {\n        return;\n      }\n\n      return Promise.reject(e);\n    });\n  }\n\n  readCacheObject() {\n    return this.AckOffline.get(\"ackNgCacheTest\").then(v => {\n      this.cache = v;\n\n      if (v) {\n        this.cache.seconds = (v[\"expires\"] - v[\"_timestamp\"]) / 1000;\n      }\n    });\n  }\n\n  clearAllOffline() {\n    this.AckOffline.clearAll().then(() => this.reloadData());\n  }\n\n  setCache(value, seconds) {\n    const expires = new Date(Date.now() + seconds * 1000).getTime();\n    return this.AckCache.set(\"ackNgCacheTest\", value, {\n      expires: expires\n    }).then(() => this.readCache());\n  }\n\n  clearCache() {\n    this.AckCache.clear(\"ackNgCacheTest\").then(() => this.readCache());\n  }\n\n  clearOffline() {\n    this.offlineStorage = \"\";\n    this.AckOffline.clear(\"ack-angular\").then(() => this.readOffline());\n  }\n\n  setOffline(string) {\n    this.offlineStorage = string;\n    this.AckOffline.set(\"ack-angular\", string);\n  }\n\n  clearQue() {\n    return this.AckQue.clear(\"ackNgQueTest\").then(() => this.readQue());\n  }\n\n  que(itemData) {\n    this.queStorage = \"\";\n    return this.AckQue.que(\"ackNgQueTest\", itemData).then(() => this.readQue());\n  }\n\n  dequeByIndex(index) {\n    return this.AckQue.dequeByIndex(\"ackNgQueTest\", index).then(() => this.readQue());\n  }\n\n  processQueItem(itemData) {\n    return getServerTime() + \" : ack-touched-data : \" + itemData;\n  }\n\n  processQuedByIndex(index) {\n    return this.AckQue.processQuedByIndex(\"ackNgQueTest\", index).then(result => this.processQueResults.push(result)).then(() => this.readQue());\n  }\n\n  processQue() {\n    return this.AckQue.processQue(\"ackNgQueTest\").then(results => this.processQueResults.push.apply(this.processQueResults, results)).then(() => this.readQue()).catch(e => this.error = e);\n  }\n\n  runConfirm() {\n    return this.Prompts.confirm(\"This is a confirm example\").subscribe(result => console.log(\"result of confirm:\" + result));\n  }\n\n  runAlert() {\n    return this.Prompts.alert(\"This is an alert example\").subscribe(() => console.log(\"alert prompt closed\"));\n  }\n\n};\nProviderExamples = __decorate([Component({\n  selector: \"provider-examples\",\n  templateUrl: './provider-examples.html',\n  animations\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof Log !== \"undefined\" && Log) === \"function\" ? _a : Object, typeof (_b = typeof ErrorLog !== \"undefined\" && ErrorLog) === \"function\" ? _b : Object, PageScrollService, AckOffline, AckCache, AckQue, AckApi, typeof (_c = typeof Prompts !== \"undefined\" && Prompts) === \"function\" ? _c : Object])], ProviderExamples);\nexport { ProviderExamples };\n\nfunction getServerTime(d) {\n  d = d || new Date();\n  var h = d.getHours(),\n      t = \"AM\",\n      m = d.getMinutes();\n  m = m < 10 ? \"0\" + m : m;\n  h = h >= 12 ? (t = \"PM\", h - 12 || 12) : h == 0 ? 12 : h;\n  return (\"0\" + h).slice(-2) + \":\" + m + \":\" + (\"0\" + d.getSeconds()).slice(-2) + \".\" + d.getMilliseconds() + \" \" + t;\n}","map":null,"metadata":{},"sourceType":"module"}