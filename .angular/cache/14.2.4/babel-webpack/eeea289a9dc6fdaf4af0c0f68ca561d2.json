{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BaseDmFileReader } from \"./DirectoryManagers\";\nimport { directoryReadToArray } from \"./directoryReadToArray.function\";\nimport { path } from \"./path\";\nexport class BrowserDmFileReader extends BaseDmFileReader {\n  constructor(file, directory) {\n    super();\n    this.file = file;\n    this.directory = directory;\n    this.name = file.name;\n  }\n\n  write(fileString) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let writableStream;\n      const likeFile = this.file;\n      const hasPermission = likeFile.queryPermission && (yield likeFile.queryPermission()) === 'granted';\n\n      if (hasPermission) {\n        writableStream = yield likeFile.createWritable();\n      } else {\n        const id = this.name.replace(/[^a-zA-Z0-9]/g, '-') + '-filePicker';\n        const savePickerOptions = {\n          suggestedName: this.name\n        };\n        savePickerOptions.id = id.slice(0, 32);\n        const handle = yield window.showSaveFilePicker(savePickerOptions);\n        writableStream = yield handle.createWritable();\n      }\n\n      yield writableStream.write(fileString);\n      yield writableStream.close();\n    });\n  }\n\n  getReadFile() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const file = this.file;\n      return file.getFile ? yield file.getFile() : Promise.resolve(file);\n    });\n  }\n\n  readAsText() {\n    return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {\n      try {\n        var reader = new FileReader();\n        const file = yield this.getReadFile();\n        reader.readAsText(file);\n\n        reader.onload = () => res(reader.result);\n      } catch (err) {\n        rej(err);\n      }\n    }));\n  }\n\n}\nexport class BrowserDirectoryManager {\n  constructor(path, files, directoryHandler) {\n    this.path = path;\n    this.files = files;\n    this.directoryHandler = directoryHandler;\n  }\n\n  list() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.files.map(file => file.name);\n    });\n  }\n\n  listFiles() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.files.filter(file => file.kind === 'file').map(file => new BrowserDmFileReader(file, this));\n    });\n  }\n\n  getDirectory(newPath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const newPathArray = newPath.split('/');\n      const dir = yield newPathArray.reduce((last, current) => __awaiter(this, void 0, void 0, function* () {\n        const next = yield last;\n        const newHandle = next.getDirectoryHandle(current, options);\n        return newHandle;\n      }), Promise.resolve(this.directoryHandler));\n      const files = yield directoryReadToArray(dir);\n      const fullNewPath = path.join(this.path, newPath);\n      const newDir = new BrowserDirectoryManager(fullNewPath, files, dir);\n      return newDir;\n    });\n  }\n\n  file(fileName, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const findFile = yield this.findFileByPath(fileName);\n\n      if (findFile) {\n        return findFile;\n      }\n\n      const fileHandle = yield this.directoryHandler.getFileHandle(fileName, options);\n      return new BrowserDmFileReader(fileHandle, this);\n    });\n  }\n\n  findFileByPath(path, directoryHandler = this.directoryHandler) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pathSplit = path.split('/');\n      const fileName = pathSplit[pathSplit.length - 1];\n\n      if (!this.files.length) {\n        return;\n      }\n\n      if (pathSplit.length > 1) {\n        const lastParent = pathSplit.shift();\n        const newHandler = yield directoryHandler.getDirectoryHandle(lastParent);\n\n        if (!newHandler) {\n          console.debug('no matching upper folder', lastParent, directoryHandler);\n          return;\n        }\n\n        const newPath = pathSplit.join('/');\n        const dirMan = yield this.getDirectory(lastParent);\n        return dirMan.findFileByPath(newPath, newHandler);\n      }\n\n      let files = this.files;\n\n      if (directoryHandler) {\n        files = yield directoryReadToArray(directoryHandler);\n      }\n\n      const likeFile = files.find(file => file.name === fileName);\n\n      if (!likeFile) {\n        return;\n      }\n\n      return new BrowserDmFileReader(likeFile, this);\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}