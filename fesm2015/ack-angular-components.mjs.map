{"version":3,"file":"ack-angular-components.mjs","sources":["../../src/directory-managers/readFileStream.function.ts","../../src/directory-managers/stringToXml.function.ts.ts","../../src/directory-managers/DmFileReader.ts","../../src/directory-managers/BrowserDmFileReader.ts","../../src/directory-managers/DirectoryManagers.ts","../../src/directory-managers/directoryReadToArray.function.ts","../../src/directory-managers/path.ts","../../src/directory-managers/BrowserDirectoryManagers.ts","../../src/directory-managers/convertSlashes.ts","../../src/directory-managers/Neutralino.streams.ts","../../src/directory-managers/NeutralinoDmFileReader.ts","../../src/directory-managers/NeutralinoDirectoryManager.ts","../../src/directory-managers/SafariDirectoryManagers.ts","../../src/components/robust-select-directory/robust-select-directory.component.ts","../../src/components/robust-select-directory/robust-select-directory.component.html","../../src/declarations.ts","../../src/AckComponentsModule.ts","../../src/ack-angular-components.ts"],"sourcesContent":["import { DmFileReader, streamCallback, StreamStats } from \"./DmFileReader\"\n\n/**  This function reads a file from the user's file system and returns an Observable that emits slices of the file */\nexport function readFileStream(\n  file: File,\n  chunkSize: number = 1024 * 1024, // 1MB,\n  eachString: streamCallback = (string: string) => undefined\n): Promise<void> {\n  const fileSize = file.size\n  let offset = 0\n  let stopped = false\n\n  return new Promise<void>((res, rej) => {\n    const reader = new FileReader()\n\n    const stop = () => {\n      stopped = true\n      reader.abort()\n    }\n    const cancel = stop\n  \n    reader.onload = (event) => {\n      if (event.target?.result) {        \n        eachString(\n          event.target.result as string, {\n            isLast: (offset + chunkSize) >= fileSize,\n            percent: offset / fileSize * 100,\n            offset,\n            stop,\n            cancel\n          }\n        )\n        \n        // increment\n        offset += chunkSize\n      }\n\n      if (!stopped && offset < fileSize) {\n        readSlice()\n      } else {\n        res()\n      }\n    }\n\n    reader.onerror = rej\n\n    function readSlice() {\n      const slice = file.slice(offset, offset + chunkSize)\n      reader.readAsText(slice)\n    }\n\n    readSlice()\n    // return () => reader.abort()\n  })\n}\n\n\nexport async function readWriteFile(\n  file: DmFileReader,\n  fileHandle: FileSystemFileHandle,\n  transformFn: (\n    chunk: string,\n    stats: StreamStats\n  ) => string, // aka callback\n  chunkSize = 1024 * 1024, // 1 MB\n): Promise<void> {\n  const writableStream = await fileHandle.createWritable() // Open a writable stream for the file\n  const onString: streamCallback = async (string, stats) => {\n    const originalStop = stats.stop\n    stats.stop = () => {\n      originalStop() // call the stop we are wrapping\n      writableStream.close()\n    }\n    stats.cancel = () => {\n      originalStop() // call the stop we are wrapping\n      writableStream.abort()\n    }\n        \n    return writableStream.write(\n      await transformFn(string, stats)\n    )\n  }\n  \n  await file.readTextStream(onString, chunkSize)\n  await writableStream.close()\n  writableStream.truncate\n}\n","export function stringToXml(string: string) {\n  return new DOMParser().parseFromString(string.trim(), \"text/xml\")\n}\n","import { DirectoryManager, FileStats } from \"./DirectoryManagers\"\nimport { stringToXml } from \"./stringToXml.function.ts\"\n\nexport interface StreamStats {\n  offset: number\n  percent: number\n  isLast: boolean\n  stop: () => unknown // a function to allow caller to call for a stop of file streaming. During file write this will cause an incomplete file (use cancel instead)\n  cancel: () => unknown // a function to allow caller to call for a stop of file streaming. During file write this will prevent writing an incomplete file\n}\n\nexport type streamCallback = (\n  string: string,\n  stats: StreamStats\n) => any\n\nexport interface DmFileReader {\n  directory: DirectoryManager\n  name: string\n  \n  write: (fileString: string | ArrayBuffer) => Promise<void>\n  readWriteTextStream: (\n    callback: streamCallback,\n    chunkSize?: number, // 1 MB should be default\n  ) => Promise<void>\n  \n\n  readAsText: () => Promise<string>\n  readTextStream: (\n    callback: streamCallback,\n    chunkSize?: number, // default 1024\n  ) => Promise<void>\n  readAsJson: () => Promise<Object>\n  readAsDataURL: () => Promise<string>\n  readAsXml: () => Promise<Document>\n  readXmlFirstElementByTagName: (tagName: string) => Promise<Element | undefined>\n  readXmlElementsByTagName: (tagName: string) => Promise<Element[]>\n  readXmlFirstElementContentByTagName: (tagName: string) => Promise<string | null | undefined>\n\n  stats: () => Promise<FileStats>\n}\n\nexport class BaseDmFileReader {\n  async readXmlFirstElementContentByTagName(tagName: string): Promise<string | null | undefined> {\n    const elements = await this.readXmlElementsByTagName(tagName)\n    return elements.find(tag => tag.textContent )?.textContent\n  }\n\n  async readXmlElementsByTagName(tagName: string): Promise<Element[]> {\n    const xml = await this.readAsXml()\n    return new Array(...xml.getElementsByTagName(tagName) as any)\n  }\n\n  async readXmlFirstElementByTagName(tagName: string): Promise<Element | undefined> {\n    const xml = await this.readAsXml()\n    const elements = new Array(...xml.getElementsByTagName(tagName) as any)\n    return elements.length ? elements[0] : undefined\n  }\n\n  async readAsXml(): Promise<Document> {\n    const string = await this.readAsText()\n    return stringToXml( string )\n  }\n  \n  async readAsJson(): Promise<string> {\n    return JSON.parse(await this.readAsText())\n  }\n  \n  readAsText(): Promise<string> {\n    throw new Error('no override provided for BaseDmFileReader.readAsText')\n  }\n}\n","import { readFileStream, readWriteFile } from \"./readFileStream.function\"\nimport { BaseDmFileReader, DmFileReader, streamCallback } from \"./DmFileReader\"\nimport { DirectoryManager } from \"./DirectoryManagers\"\n\nexport class BrowserDmFileReader extends BaseDmFileReader implements DmFileReader {\n  name: string\n\n  constructor(\n    public file: File | FileSystemFileHandle,\n    public directory: DirectoryManager\n  ) {\n    super()\n    this.name = file.name\n  }\n\n  async stats() {\n    return this.getRealFile()\n  }\n\n  async readTextStream(\n    callback: streamCallback,\n    chunkSize: number = 1024,\n  ): Promise<void> {\n    const file = await this.getRealFile()\n    return readFileStream(file, chunkSize, callback)\n  }\n\n  async readWriteTextStream(\n    callback: streamCallback,\n    chunkSize: number = 1024 * 1024, // 1 MB\n  ): Promise<void> {\n    const handle = this.file as FileSystemFileHandle\n    return readWriteFile(this, handle, callback, chunkSize)\n  }\n\n  async write(fileString: string | ArrayBuffer) {\n    let writableStream: any\n    const likeFile: any = this.file\n    const hasPermission = likeFile.queryPermission && await likeFile.queryPermission() === 'granted'\n\n    if ( hasPermission ) {\n      writableStream = await likeFile.createWritable()\n    } else {\n      // request where to save\n      const id = this.name.replace(/[^a-zA-Z0-9]/g,'-')+'-filePicker'\n      const savePickerOptions = {\n        suggestedName: this.name,\n        /*\n        // todo: may need to use mime types\n        types: [{\n          description: 'JSON',\n          accept: {\n            'application/json': ['.json'],\n          },\n        }],\n        */\n      }\n\n      // below, thought to remember last matching file (i think data typing is just missing for it)\n      ;(savePickerOptions as any).id = id.slice(0, 32)\n\n      const handle = await window.showSaveFilePicker(savePickerOptions)\n      \n      writableStream = await handle.createWritable()\n    }\n\n\n    // write our file\n    await writableStream.write( fileString )\n\n    // close the file and write the contents to disk.\n    await writableStream.close()\n  }\n\n  private async getRealFile(): Promise<File> {\n    const file = this.file as any\n    return file.getFile ? await file.getFile() : Promise.resolve(file)\n  }\n  \n  override readAsText(): Promise<string> {\n    return new Promise(async (res, rej) => {\n      try {\n        const reader = new FileReader()\n        const file = await this.getRealFile()\n        reader.readAsArrayBuffer\n        reader.readAsText(file)\n        reader.onload = () => res(reader.result as string)\n      } catch (err) {\n        rej(err)\n      }\n    })\n  }\n\n  readAsDataURL(): Promise<string> {\n    return new Promise(async (res, rej) => {\n      try {\n        var reader = new FileReader()\n        const file = await this.getRealFile()\n        reader.readAsDataURL(file)\n        reader.onload = () => {\n          const result = reader.result as string\n          // remove `data:application/json;base64,`\n          // remove `data:image/png;base64,`\n          // const replaced = result.replace(/^.+,/,'')\n          res(result)\n        }\n      } catch (err) {\n        rej(err)\n      }\n    })\n  }\n}\n","import { DmFileReader } from \"./DmFileReader\"\n\nexport interface DirectoryManager {\n  name: string\n  path: string\n\n  createDirectory: (\n    path: string\n  ) => Promise<DirectoryManager>\n\n  // should throw error if directory does not exist\n  getDirectory: (\n    path: string,\n    options?: FileSystemGetDirectoryOptions\n  ) => Promise<DirectoryManager>\n  \n  // should return undefined if directory does not exist\n  findDirectory: (\n    path: string,\n    options?: FileSystemGetDirectoryOptions\n  ) => Promise<DirectoryManager | undefined>\n  \n  list: () => Promise<string[]>\n  listFiles: () => Promise<string[]>\n  listFolders: () => Promise<string[]>\n  \n  getFolders: () => Promise<DirectoryManager[]>\n  getFiles: () => Promise<DmFileReader[]>\n  findFileByPath: (path: string) => Promise<DmFileReader | undefined>\n  file: (\n    fileName: string,\n    options?: FileSystemGetFileOptions\n  ) => Promise<DmFileReader>\n\n  renameFile: (\n    oldFileName: string,\n    newfileName: string,\n    options?: FileSystemGetFileOptions\n  ) => Promise<DmFileReader>\n\n  copyFile: (\n    oldFileName: string,\n    newfileName: string,\n    options?: FileSystemGetFileOptions\n  ) => Promise<DmFileReader>\n\n  removeEntry: (\n    name: string,\n    options?: { recursive: boolean }\n  ) => Promise<void>\n}\n\nexport interface FileStats {\n  lastModified: number\n  lastModifiedDate?: Date\n  name: string\n  size: number // 788\n  type: string // \"application/json\"\n}\n\nexport function getNameByPath(path: string) {\n  const half = path.split(/\\//).pop() as string\n  return half.split(/\\\\/).pop() as string\n}\n\nexport async function findDirectoryWithin(\n  path: string,\n  inDir: DirectoryManager,\n  options?: FileSystemGetDirectoryOptions,\n): Promise<DirectoryManager | undefined> {\n  const pathSplit = path.split('/').filter(x => x)\n  \n  if ( pathSplit.length >= 1 ) {\n    const firstParent = pathSplit.shift() as string // remove index 0 of firstParent/firstParent/file.xyz\n    \n    try {\n      const parent = await inDir.getDirectory(firstParent)\n      if ( !parent ) {\n        return // undefined\n      }\n      return await findDirectoryWithin(pathSplit.join('/'), parent, options)\n    } catch (err) {\n      const folderList = await inDir.listFolders()\n      if ( folderList.includes(firstParent) ) {\n        throw err // rethrow because its not about a missing folder\n      }\n\n      return // our folderList does not contain what we are looking for\n    }\n  }\n\n  return inDir // return last result\n}\n\nexport async function renameFileInDir(\n  oldFileName: string,\n  newFileName: string,\n  dir: DirectoryManager\n): Promise<DmFileReader> {\n  const newFile = await copyFileInDir(oldFileName, newFileName, dir)\n  await dir.removeEntry(oldFileName)\n  return newFile\n}\n\nexport async function copyFileInDir(\n  oldFileName: string,\n  newFileName: string,\n  dir: DirectoryManager\n): Promise<DmFileReader> {\n  const oldFile = await dir.file(oldFileName)\n  const data = await oldFile.readAsText()\n  const newFile = await dir.file(newFileName, { create: true })\n  await newFile.write(data)\n  return newFile\n}\n\nexport async function getDirForFilePath(\n  path: string,\n  fromDir: DirectoryManager,\n  options?: FileSystemGetDirectoryOptions,\n) {\n  const pathSplit = path.split(/\\\\|\\//)\n  pathSplit.pop() as string // remove the file\n  const pathWithoutFile = pathSplit.join('/')\n\n  return await fromDir.getDirectory(pathWithoutFile, options)\n}\n","export async function directoryReadToArray(\n  // directory: FileSystemFileHandle[] //LikeFile[]\n  directory: FileSystemDirectoryHandle //LikeFile[]\n): Promise<FileSystemFileHandle[]> {\n  const files: FileSystemFileHandle[] = [] // {name: string, kind: string, getFile: () => File}[] = []\n  for await (const entry of directory.values()) {\n    files.push(entry as any)\n  }\n  return files\n}","export const path = {\n  join: (...args: string[]) => {\n    return args.filter(value => value.length).join('/')\n  }\n}\n","import { BrowserDmFileReader } from \"./BrowserDmFileReader\"\nimport { copyFileInDir, DirectoryManager, findDirectoryWithin, getDirForFilePath, getNameByPath, renameFileInDir } from \"./DirectoryManagers\"\nimport { directoryReadToArray } from \"./directoryReadToArray.function\"\nimport { DmFileReader } from \"./DmFileReader\"\nimport { path } from \"./path\"\n\nexport class BrowserDirectoryManager implements DirectoryManager {\n  name: string\n\n  constructor(\n    public path: string,\n    public files: FileSystemFileHandle[], // LikeFile[],\n    public directoryHandler: FileSystemDirectoryHandle,\n  ) {\n    this.name = getNameByPath(path)\n  }\n\n  findDirectory (\n    path: string,\n    options?: FileSystemGetDirectoryOptions,\n  ): Promise<BrowserDirectoryManager | undefined> {\n    return findDirectoryWithin(path, this, options) as Promise<BrowserDirectoryManager | undefined>\n  }\n  \n  async list(): Promise<string[]> {\n    const files = await directoryReadToArray(this.directoryHandler)\n    return files.map(file => file.name)\n  }\n  \n  async listFolders(): Promise<string[]> {\n    const items = await directoryReadToArray(this.directoryHandler)\n    return items.filter((file: any) => file.kind && (file as any).kind === 'directory')\n      .map(file => file.name)\n  }\n  \n  async listFiles(): Promise<string[]> {\n    const items = await directoryReadToArray(this.directoryHandler)\n    return items.filter((file: any) => file.kind === 'file')\n      .map((file: any) => file.name)\n  }\n  \n  async getFolders(): Promise<DirectoryManager[]> {\n    const names = await this.listFolders()\n    return Promise.all(\n      names.map(async name => await this.getDirectory(name))\n    ) as Promise<DirectoryManager[]>\n  }\n  \n  async getFiles(): Promise<DmFileReader[]> {\n    const files = await directoryReadToArray(this.directoryHandler)\n    return files.filter(file => file.kind === 'file')\n      .map(file => new BrowserDmFileReader(file, this))\n  }\n\n  createDirectory(\n    newPath: string\n  ): Promise<DirectoryManager> {\n    return this.getDirectory(newPath, { create: true })\n  }\n\n  async getDirectory(\n    newPath: string,\n    options?: FileSystemGetDirectoryOptions\n  ): Promise<BrowserDirectoryManager> {\n    if ( !newPath ) {\n      return this\n    }\n\n    const newPathArray = newPath.split(/\\\\|\\//)\n    let fullNewPath = this.path\n    let dir: FileSystemDirectoryHandle\n\n    try {\n      // traverse through each folder\n      dir  = await newPathArray.reduce(async (last,current) => {\n        const next: FileSystemDirectoryHandle = await last\n        const newHandle = next.getDirectoryHandle(current, options)\n        const name = (await newHandle).name\n        fullNewPath = path.join(fullNewPath, name)\n        return newHandle\n      }, Promise.resolve(this.directoryHandler))\n    } catch (err: any) {\n      throw new Error(err.message + `. ${newPath} not found in ${this.name} (${this.path})`)\n    }\n\n    // TODO: We may not need to read files in advanced (originally we did this for safari)\n    const files: FileSystemFileHandle[] = await directoryReadToArray(dir)\n    const newDir = new BrowserDirectoryManager(\n      fullNewPath,\n      files,\n      dir\n    )\n    return newDir\n  }\n\n  async removeEntry(\n    name: string,\n    options?: { recursive: boolean }\n  ): Promise<void> {\n    const split = name.split(/\\\\|\\//)\n    const lastName = split.pop() as string // remove last item\n    const subDir = split.length >= 1\n    const dir = (subDir ? await this.getDirectory( split.join('/') ) : this) as BrowserDirectoryManager\n    return dir.directoryHandler.removeEntry(lastName, options)\n  }\n\n  async renameFile(\n    oldFileName: string,\n    newFileName: string\n  ): Promise<DmFileReader> {\n    return renameFileInDir(oldFileName, newFileName, this)\n  }\n\n  async copyFile(\n    oldFileName: string,\n    newFileName: string\n  ): Promise<DmFileReader> {\n    return copyFileInDir(oldFileName, newFileName, this)\n  }\n\n  async file(\n    path: string,\n    options?: FileSystemGetFileOptions,\n  ): Promise<DmFileReader> {\n    const findFile = await this.findFileByPath(path)\n    if ( findFile ) {\n      return findFile\n    }\n\n    const dirOptions = { create: options?.create }\n    const dir = await getDirForFilePath(path, this, dirOptions) as BrowserDirectoryManager\n    const fileName = path.split(/\\\\|\\//).pop() as string\n\n    const fileHandle = await dir.directoryHandler.getFileHandle(fileName, options)\n    return new BrowserDmFileReader(fileHandle, dir)\n  }\n\n  async findFileByPath(\n    path: string,\n    directoryHandler: any = this.directoryHandler,\n  ): Promise<BrowserDmFileReader | undefined> {\n    const pathSplit = path.split(/\\\\|\\//)\n    const fileName = pathSplit.pop() // pathSplit[ pathSplit.length-1 ]\n    let dir: BrowserDirectoryManager = this\n\n    // chrome we dig through the first selected directory and search the subs\n    if ( pathSplit.length ) {\n      const findDir = await this.findDirectory( pathSplit.join('/') )\n      \n      if ( !findDir ) {\n        return\n      }\n\n      dir = findDir\n      directoryHandler = dir.directoryHandler\n    }\n    \n    let files = this.files\n    files = await directoryReadToArray(directoryHandler)\n    const likeFile = files.find(file => file.name === fileName)\n    if ( !likeFile ) {\n      return\n    }\n    \n    // when found, convert to File\n    // const file = await this.getSystemFile(likeFile)\n    return new BrowserDmFileReader(likeFile, dir)\n  }  \n}\n","export function convertSlashes(string: string) {\n  return string.replace('\\\\','/')\n}\n","import { INeutralino, INeutralinoFs } from \"./Neutralino.utils\"\nimport { streamCallback } from \"./DmFileReader\"\n\ndeclare const Neutralino: INeutralino\nexport const fs = typeof Neutralino === 'object' ? Neutralino.filesystem : {} as INeutralinoFs\n\n/** Read a file in streams awaiting a callback to process each stream before reading another */\nexport async function readTextStream(\n  filePath: string,\n  callback: streamCallback,\n  // Below, if number is too low, Neutralino witnessed will fail NE_RT_NATRTER (hopefully its not a specific number used versus how much is available to stream in targeted file)\n  chunkSize = 1024 * 18,\n): Promise<void> {\n  let stopped = false\n  const stop = () => {\n    stopped = true\n  }\n\n  return new Promise(async (res, rej) => {\n    let offset = 0\n    const stats = await fs.getStats(filePath)\n    const size = stats.size\n\n    let close = () => {\n      Neutralino.events.off('openedFile', dataCallback)\n      res( undefined )\n      \n      // prevent calling callbacks twice by redeclaring them\n      const empty = () => undefined\n      close = empty\n      dataCallback = empty\n    }\n\n    // main callback used to read each stream of data. On close of stream, its re-declared as an empty function\n    let dataCallback = (evt: any) => {\n      if(evt.detail.id != fileId) {\n        return // this call is not for us\n      }\n\n      switch(evt.detail.action) {\n        case 'data':\n          const isLast = (offset + chunkSize) >= size\n          const percent = offset / size * 100\n          const string = evt.detail.data\n                      \n          try {\n            // if callback return promise, wait for it\n            return Promise.resolve( callback(string, { offset, isLast, percent, stop, cancel: stop }) )\n              .then(() => {\n                offset = offset + chunkSize // increase for next iteration\n\n                // are we done or shall we trigger the next read?\n                isLast || stopped ? close() : read()\n              })\n          } catch (err) {\n            rej(err)\n            return close() // error should force everything to stop\n          }\n        case 'end':\n          close() // indication of done by Neutralino\n          return\n      }\n    }\n\n    // used at every time we are ready to continue reading\n    const read = async () => {\n      try {\n        const ableToRead = size - (offset + chunkSize)\n        // prevent a trying to read more than their is file (otherwise odd trailing characters)\n        if ( ableToRead < 0 ) {\n          chunkSize = chunkSize + ableToRead\n        }\n\n        // no await here needed (dataCallback will be called)\n        await Neutralino.filesystem.updateOpenedFile(fileId, 'read', chunkSize)\n      } catch (err) {\n        rej(err)\n        close()\n      }  \n    }\n\n    // Create a callback calling callback so incase we need to prevent further calls we can switch out the first callback\n    const realCallback = (evt: any) => dataCallback(evt)\n\n    // start the actual processing\n    Neutralino.events.on('openedFile', realCallback)\n    const fileId = await Neutralino.filesystem.openFile( filePath )\n    read()\n  })\n}  \n\n/** Read a file in streams awaiting a callback to provide a string to write as new content for the original read file\n * 1. A blank file is created\n * 2. Original file is read in streams\n * 3. Result from callback is appended to the file in step 1\n * 4. When all of file is read we rename the original file\n * 5. The file we append all results to, is renamed to the original files name\n * 6. The original file, that was renamed, is now deleted\n * - All of the above must be performed as Neutralino does not support stream writing like the browser does\n*/\nexport async function readWriteFile(\n  filePath: string,\n  callback: streamCallback,\n  chunkSize: number = 1024 * 18 // Too low a number, can error. More details in file search for \"chunkSize\" in this file\n): Promise<void> {\n  const cloneFullPath = filePath + '.writing'\n  const renameFullPath = filePath + '.original'\n\n  // create an empty file we will stream results into\n  await Neutralino.filesystem.writeFile(cloneFullPath, '')\n\n  // create callback that will handle each part of the stream\n  const midware: streamCallback = (string, stats) => {\n    stats.cancel = () => {\n      stats.stop()\n      Neutralino.filesystem.removeFile(renameFullPath) // remove the safety file\n      Neutralino.filesystem.removeFile(cloneFullPath) // remove the clone.writing file we created\n    }\n\n    const newString = callback(string, stats)\n    \n    // no await\n    return Neutralino.filesystem.appendFile(cloneFullPath, newString)\n  }\n\n  // stream the entire file\n  await readTextStream(filePath, midware, chunkSize)\n\n  // rename original file just incase any issues with next step(s)\n  await Neutralino.filesystem.moveFile(filePath, renameFullPath)\n\n  // rename the file we stream wrote which ends in \".writing\"\n  await Neutralino.filesystem.moveFile(cloneFullPath, filePath)\n\n  // delete original file because we are done which ends in '.original'\n  await Neutralino.filesystem.removeFile(renameFullPath)\n}","import { FileStats } from \"./DirectoryManagers\"\nimport { BaseDmFileReader, DmFileReader, streamCallback } from \"./DmFileReader\"\nimport { fs, readTextStream, readWriteFile } from \"./Neutralino.streams\"\nimport { NeutralinoDirectoryManager } from \"./NeutralinoDirectoryManager\"\n\nexport class NeutralinoDmFileReader extends BaseDmFileReader implements DmFileReader {\n  name: string\n  \n  constructor(\n    public filePath: string,\n    public directory: NeutralinoDirectoryManager,\n  ) {\n    super()\n    this.name = filePath.split(/\\\\|\\//).pop() as string\n  }\n\n  async readTextStream(\n    callback: streamCallback,\n    chunkSize: number = 82944 // 1024 * 18 because low numbers cause issues\n  ): Promise<void> {\n    return readTextStream(this.filePath, callback, chunkSize)\n  }\n\n  async stats(): Promise<FileStats> {\n    const stats = await fs.getStats(this.filePath)\n    \n    const castedStats = {...stats} as any as FileStats\n    castedStats.name = castedStats.name || this.name\n    castedStats.lastModified = stats.modifiedAt\n    castedStats.type = stats.isFile ? 'file' : 'directory'\n    \n    return castedStats\n  }\n\n  override readAsText(): Promise<string> {\n    return fs.readFile(this.filePath) // .toString()\n  }\n  \n  async readAsDataURL(): Promise<string> {\n    const data = await fs.readBinaryFile(this.filePath)\n    const view = new Uint8Array(data)\n    \n    const decoded = String.fromCharCode(...view)\n    //const decoder = new TextDecoder('utf8')\n    //const decoded = decoder.decode(view)\n    \n    const b64encoded = btoa(decoded)\n\n    const ext = this.filePath.split('.').pop() as string\n    const dataType = getMimeType(ext)\n\n    const url = `data:${dataType};base64,` + b64encoded // remove `application/json;base64,`\n    return url\n  }\n\n  /**\n   * 1. Creates a file of a similar name and reads from source file\n   * 2. Writes to created via append commands\n   * 3. The original file is renamed on stream end\n   * 4. The new file is named to the original and then original file is then deleted */\n  async readWriteTextStream(\n    callback: streamCallback,\n    chunkSize: number = 1024 * 1024, // 1 MB\n  ): Promise<void> {\n    const pathTo = this.directory.path\n    const fullPath = pathTo + '/' + this.name\n    return readWriteFile(fullPath, callback, chunkSize)\n  }\n\n  async write(fileString: string | ArrayBuffer) {\n    return fs.writeFile(this.filePath, fileString)\n  }\n}\n\nfunction getMimeType(ext: string) {\n  switch (ext) {\n    case 'png':\n      return 'image/png'\n    case 'jpeg':\n    case 'jpg':\n      return 'image/png'\n  }\n\n  return 'application/json'\n}","import { convertSlashes } from \"./convertSlashes\"\nimport { DirectoryManager, findDirectoryWithin, getDirForFilePath, getNameByPath, renameFileInDir } from \"./DirectoryManagers\"\nimport { DmFileReader } from \"./DmFileReader\"\nimport { INeutralino } from \"./Neutralino.utils\"\nimport { NeutralinoDmFileReader } from \"./NeutralinoDmFileReader\"\nimport { path } from \"./path\"\n\ndeclare const Neutralino: INeutralino\n\nexport class NeutralinoDirectoryManager implements DirectoryManager {\n  name: string\n\n  constructor(\n    public path: string,\n  ) {\n    this.name = getNameByPath(path)\n  }\n\n  findDirectory (\n    path: string,\n    options?: FileSystemGetDirectoryOptions,\n  ): Promise<NeutralinoDirectoryManager | undefined> {\n    return findDirectoryWithin(path, this, options) as Promise<NeutralinoDirectoryManager | undefined>\n  }\n\n  async list(): Promise<string[]> {\n    const reads = await Neutralino.filesystem.readDirectory( this.path )\n    return reads.filter(read => !['.','..'].includes(read.entry)).map(read => read.entry)\n  }\n\n  async listFolders(): Promise<string[]> {\n    const reads = await Neutralino.filesystem.readDirectory( this.path )\n    return reads.filter(read => !['.','..'].includes(read.entry) && read.type === 'DIRECTORY')\n      .map(read => read.entry)\n  }\n\n  async listFiles(): Promise<string[]> {\n    const reads = await Neutralino.filesystem.readDirectory( this.path )\n    return reads.filter(read => !['.','..'].includes(read.entry) && read.type !== 'DIRECTORY')\n      .map(read => read.entry)\n  }\n\n  async getFolders(): Promise<NeutralinoDirectoryManager[]> {\n    return Promise.all(\n      (await this.listFolders()).map(async name => await this.getDirectory(name))\n    )\n  }\n\n  async getFiles(): Promise<DmFileReader[]> {\n    const reads = await Neutralino.filesystem.readDirectory( this.path )\n    return reads.filter(read => !['.','..'].includes(read.entry) && read.type !== 'DIRECTORY')\n      .map(read => new NeutralinoDmFileReader(this.getFullPath(read.entry), this))\n  }\n\n  async createDirectory(\n    newPath: string\n  ): Promise<NeutralinoDirectoryManager> {\n    try {\n      const fullPath = path.join(this.path, convertSlashes(newPath))\n      await Neutralino.filesystem.readDirectory( fullPath )\n\n      // it exists, just read it\n      return this.getDirectory(newPath)\n    } catch( err: any ){\n      if ( err.code === 'NE_FS_NOPATHE' ) {\n        const splitPath = convertSlashes(newPath).split('/')\n        let pathTo = this.path\n        \n        while( splitPath.length ) {\n          const nowName = splitPath.shift() as string\n          pathTo = path.join(pathTo, nowName)\n          await Neutralino.filesystem.createDirectory(pathTo)\n        }\n    \n        const fullPath = pathTo // path.join(this.path, newPath)\n        return new NeutralinoDirectoryManager( fullPath )    \n      }\n      throw err\n    }\n  }\n\n  async getDirectory(\n    newPath: string,\n    options?: FileSystemGetDirectoryOptions\n  ): Promise<NeutralinoDirectoryManager> {\n    if ( !newPath ) {\n      return this\n    }\n    \n    const pathTo = path.join(this.path, newPath)\n    \n    try {\n      // ensure path exists\n      await Neutralino.filesystem.readDirectory(pathTo)\n      return new NeutralinoDirectoryManager( pathTo )\n    } catch (err: any) {\n      if ( err.code === 'NE_FS_NOPATHE' && options?.create ) {\n        return this.createDirectory(newPath)\n      }\n      throw err // rethrow\n    }\n  }\n\n  async findFileByPath (\n    path: string,\n  ): Promise<NeutralinoDmFileReader | undefined> {\n    const pathSplit = path.split(/\\\\|\\//)\n    const fileName = (pathSplit.pop() as string).toLowerCase() // pathSplit[ pathSplit.length-1 ]\n    let dir: NeutralinoDirectoryManager = this\n\n    // chrome we dig through the first selected directory and search the subs\n    if ( pathSplit.length ) {\n      const findDir = await this.findDirectory( pathSplit.join('/') )\n      \n      if ( !findDir ) {\n        return\n      }\n      \n      dir = findDir\n    }\n    \n    const files = await dir.listFiles()\n    const matchName = files.find(listName => listName.toLowerCase() === fileName)\n    if ( !matchName ) {\n      return\n    }\n\n    const fullPath = dir.getFullPath(matchName)\n    return new NeutralinoDmFileReader(fullPath, dir)\n  }\n\n  async file(\n    pathTo: string,\n    options?: FileSystemGetFileOptions\n  ) {\n    const existingFile = await this.findFileByPath(pathTo)\n\n    if ( existingFile ) {\n      return existingFile\n    }\n\n    // TODO: This work should most likely only occur if the options.create flag is present otherwise throw not found error\n    const dirOptions = { create: options?.create }\n    const dir = await getDirForFilePath(pathTo, this, dirOptions) as NeutralinoDirectoryManager\n    const fileName = pathTo.split(/\\\\|\\//).pop() as string\n    const fullPath = path.join(dir.path, fileName)\n\n    return new NeutralinoDmFileReader(fullPath, dir)\n  }\n\n  getFullPath(itemPath: string) {\n    let fullFilePath = path.join(this.path, itemPath)\n    return convertSlashes(fullFilePath)\n  }\n\n  async copyFile(\n    oldFileName: string,\n    newFileName: string\n  ) {\n    const copyFrom = path.join(this.path, oldFileName)\n    const pasteTo = path.join(this.path, newFileName)\n    await Neutralino.filesystem.copyFile(copyFrom, pasteTo)\n    return await this.file(newFileName)\n  }\n\n  async renameFile(\n    oldFileName: string,\n    newFileName: string\n  ): Promise<DmFileReader> {\n    return renameFileInDir(oldFileName, newFileName, this)\n  }\n\n  async removeEntry(\n    name: string,\n    options?: { recursive: boolean }\n  ): Promise<void> {\n    const split = name.split(/\\\\|\\//)\n    const lastName = split.pop() as string // remove last item\n    const dir = split.length >= 1 ? await this.getDirectory( split.join('/') ) : this\n\n    const pathTo = path.join(dir.path, lastName)\n    \n    const fileNames = await dir.listFiles()\n    if ( fileNames.includes(lastName) ) {\n      return Neutralino.filesystem.removeFile(pathTo)\n    }\n        \n    try {\n      await Neutralino.filesystem.removeDirectory(pathTo)\n    } catch (err: any) {\n      // if folder delete failed, it may have items within Neutralino does not have recursive delete\n      if ( err.code === 'NE_FS_RMDIRER' && options?.recursive ) {\n        return recurseRemoveDir( await dir.getDirectory(lastName) )\n      }\n      throw err\n    }\n    return\n  }\n}\n\nasync function recurseRemoveDir(\n  dir: NeutralinoDirectoryManager\n) {\n  // remove all folders within\n  const folders = await dir.getFolders()\n  for (const subdir of folders) {\n    await recurseRemoveDir(subdir)\n  }\n\n  // remove all files within\n  const list = await dir.listFiles()\n  for (const fileName of list) {\n    await dir.removeEntry(fileName)\n  }\n\n  // try now to delete again\n  return Neutralino.filesystem.removeDirectory( dir.path )\n}","import { DirectoryManager, copyFileInDir, findDirectoryWithin, getNameByPath, renameFileInDir } from \"./DirectoryManagers\"\nimport { path } from \"./path\"\nimport { DmFileReader } from \"./DmFileReader\"\nimport { BrowserDmFileReader } from \"./BrowserDmFileReader\"\n\nexport class SafariDirectoryManager implements DirectoryManager {\n  name: string\n\n  constructor(\n    public path: string = '',\n    public files: File[],\n  ) {\n    this.name = getNameByPath(path)\n  }\n\n  async copyFile(\n    oldFileName: string,\n    newFileName: string\n  ) {\n    return copyFileInDir(oldFileName, newFileName, this)\n  }\n\n  async renameFile(\n    oldFileName: string,\n    newFileName: string\n  ) {\n    return renameFileInDir(oldFileName, newFileName, this)\n  }\n\n  /** ⚠️ does not actually work */\n  removeEntry(\n    _name: string,\n    _options?: { recursive: boolean }\n  ): Promise<void> {\n    throw 'removeEntry does not work in Safari'\n  }\n\n  findDirectory (\n    path: string,\n    options?: FileSystemGetDirectoryOptions,\n  ): Promise<DirectoryManager | undefined> {\n    return findDirectoryWithin(path, this, options)\n  }\n\n  /** ⚠️ does not actually work */\n  createDirectory(newPath: string) {\n    return this.getDirectory(newPath)\n  }\n\n  async getDirectory(path: string) {\n    // safari gives you all items up front\n    const nextItems = this.files.filter(file => {\n      const relative = getWebkitPathRelativeTo(file, this.path)\n      return relative.substring(0, path.length).toLowerCase() === path.toLowerCase()\n    })\n    return new SafariDirectoryManager(path, nextItems)\n  }\n\n  getRelativeItems() {\n    return this.files.filter(file => {\n      const relative = getWebkitPathRelativeTo(file, this.path)\n      return relative.split('/').length === 1 // lives within same directory\n    })\n  }\n\n  async list(): Promise<string[]> {\n    return this.getRelativeItems().map(file => file.name)\n  }\n\n  async listFolders(): Promise<string[]> {\n    return this.getRelativeItems()\n      .filter(file => file.name.split('.').length === 1)\n      .map(file => file.name)\n  }\n\n  async listFiles(): Promise<string[]> {\n    return this.getRelativeItems().map(file => file.name)\n  }\n  \n  async getFolders(): Promise<SafariDirectoryManager[]> {\n    return Promise.all(\n      (await this.listFolders()).map(async name => await this.getDirectory(name))\n    )\n  }\n\n  async getFiles(): Promise<DmFileReader[]> {\n    return this.getRelativeItems().map(file => new BrowserDmFileReader(file, this))\n  }\n\n  async findFileByPath (filePath: string ): Promise<BrowserDmFileReader | undefined> {\n    if ( !this.files.length ) {\n      return\n    }\n\n    // safari include the parent folder name so we need to prepend it to the file search\n    const rootName = this.files[0].webkitRelativePath.split('/').shift() as string\n    filePath = path.join(rootName, this.path, filePath)\n    \n    // safari just gives us every files upfront, find within that (huge) array\n    const file = this.files.find(file => file.webkitRelativePath === filePath) as File | undefined\n    return file ? new BrowserDmFileReader(file, this) : undefined\n  }\n\n  async file(fileName: string, _options?: FileSystemGetFileOptions) {\n    const findFile = await this.findFileByPath(fileName)\n\n    if ( findFile ) {\n      return findFile\n    }\n\n    const superFile = new BrowserDmFileReader(new File([], fileName), this)\n    return Promise.resolve(superFile)\n  }\n}\n\nfunction getWebkitPathRelativeTo(file: File, path: string) {\n  const relativeSplit = file.webkitRelativePath.split('/')\n  relativeSplit.shift() // remove the first notation on safari results\n  if ( path !== '' ) {\n    let splitCount = path.split('/').length\n    while (splitCount) {\n      relativeSplit.shift() // remove starting notations on safari results\n      --splitCount\n    }\n  }\n  return relativeSplit.join('/')\n}","import { Component, EventEmitter, Input, Output } from '@angular/core'\nimport { BrowserDirectoryManager } from '../../directory-managers/BrowserDirectoryManagers'\nimport { DirectoryManager } from '../../directory-managers/DirectoryManagers'\nimport { directoryReadToArray } from '../../directory-managers/directoryReadToArray.function'\nimport { FolderDialogOptions, INeutralino } from '../../directory-managers/Neutralino.utils'\nimport { NeutralinoDirectoryManager } from '../../directory-managers/NeutralinoDirectoryManager'\nimport { SafariDirectoryManager } from '../../directory-managers/SafariDirectoryManagers'\n\ndeclare const Neutralino: INeutralino\n\n@Component({\n  selector: 'robust-select-directory',\n  templateUrl: './robust-select-directory.component.html',\n})\nexport class RobustSelectDirectoryComponent {\n  @Input() label!: string // \"LaunchBox\"\n  @Input() pickerId?: string // ensures loaded path is same as previous\n  @Input() reloadPath?: string // C:\\blah\\blah\n  @Output() error = new EventEmitter<Error>()\n  @Input() directoryManager?: DirectoryManager\n  @Output() directoryManagerChange = new EventEmitter<DirectoryManager>()\n\n  getPickerId() {\n    return this.pickerId || this.getId().replace(/[ -_]/g,'')\n  }\n  \n  async onPathReload(path: string) {\n    if ( typeof Neutralino === 'object' ) {\n      const dm = new NeutralinoDirectoryManager(path)\n      this.directoryManagerChange.emit(this.directoryManager = dm)\n    }\n  }\n\n  async selectPath() {\n    const isNeu = typeof Neutralino === 'object'\n    if ( isNeu ) {\n      const options: FolderDialogOptions = {}\n\n      if ( this.reloadPath ) {\n        options.defaultPath = this.reloadPath\n      }\n\n      let response = await Neutralino.os.showFolderDialog(\n        'Select LaunchBox directory',\n        options\n      )\n\n      if ( response ) {\n        this.reloadPath = response\n        const dm = new NeutralinoDirectoryManager(response)\n        this.directoryManagerChange.emit(this.directoryManager = dm)\n      }\n      return\n    }\n\n    const canPickDir = window.showDirectoryPicker as any\n\n    // chrome\n    if ( canPickDir ) {  \n      try {\n        const boxDir = await window.showDirectoryPicker({\n          id: this.getPickerId(),\n          // id: this.getId(),\n          mode: 'readwrite'\n        })\n        const boxFiles = await directoryReadToArray( boxDir )\n        const dm = new BrowserDirectoryManager('', boxFiles, boxDir)\n        this.directoryManagerChange.emit(this.directoryManager = dm)\n        return\n      } catch (err: any) {\n        if ( err.message.includes('aborted') ) {\n          return\n        }\n        this.error.emit(err)\n      }\n    }\n\n    // safari\n    if ( this.showDirectoryPicker ) {\n      this.showDirectoryPicker()\n      return\n    }\n\n    let message = 'Cannot find supporting functionality to display a directory picker.'\n    if ( window.location.host.includes('0.0.0.0') ) {\n      message = message + ' Try using localhost instead of 0.0.0.0'\n    }\n\n    throw new Error(message)\n  }\n\n  getId() {\n    return 'robustFolderPicker-' + this.label\n  }\n\n  showDirectoryPicker() {\n    document.getElementById(this.getId())?.click()\n  }\n\n  // safari read directory\n  async readInputDirectory(input: any) {\n    if ( !input.files ) {\n      this.error.emit(new Error('no directory with files selected'))\n      return // no files selected\n    }\n\n    const files = Object.entries(input.files).filter(([key]) => key != 'length').map(([_key, value]) => value) as File[]\n    const dm = new SafariDirectoryManager('', files)\n    this.directoryManagerChange.emit(this.directoryManager = dm)\n  }\n}\n","<input class=\"hidden\" type=\"file\" directory accept=\".folder\" webkitdirectory\n  [id]=\"'robustFolderPicker-' + label\"\n  [name]=\"'robustFolderPicker-' + label\"\n  (change)=\"readInputDirectory($event.target)\"\n/>\n\n<button *ngIf=\"reloadPath\" type=\"button\" class=\"flex1\"\n  [title] = \"reloadPath\"\n  (click) = \"onPathReload(reloadPath)\"\n>🔄 Reload</button>\n\n<button type=\"button\" class=\"flex1\"\n  (click)=\"selectPath()\"\n  [class.opacity-80] = \"directoryManager\"\n>📁 {{ directoryManager ? 're' : '' }}select {{ label }} folder</button>\n\n<div *ngIf=\"reloadPath\" class=\"text-xs\">\n  <strong>{{ label }} path:</strong> {{ reloadPath }}\n</div>\n","import { RobustSelectDirectoryComponent } from \"./components/robust-select-directory/robust-select-directory.component\";\nexport { RobustSelectDirectoryComponent } from \"./components/robust-select-directory/robust-select-directory.component\";\n\nexport const declarations = [\n  RobustSelectDirectoryComponent,\n]\n","import {\n  ModuleWithProviders,\n  NgModule\n} from \"@angular/core\"\n\nimport { CommonModule } from \"@angular/common\"\nexport { CommonModule } from \"@angular/common\"\n\nimport { declarations as components } from \"./declarations\"\n\nconst declarations = [...components]\n\n@NgModule({\n  imports:[\n    CommonModule\n  ],\n  declarations,\n  exports: declarations\n}) export class AckComponentsModule {\n  static forRoot(): ModuleWithProviders<AckComponentsModule> {\n    return {\n      ngModule: AckComponentsModule,\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["readWriteFile","declarations","components","i1.RobustSelectDirectoryComponent"],"mappings":"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"}